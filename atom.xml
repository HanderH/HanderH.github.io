<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hsj的博客</title>
  <icon>https://www.gravatar.com/avatar/0b5d6648195c1648e8c43af28a2b4905</icon>
  <subtitle>life and work</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.handerh.top/"/>
  <updated>2019-07-04T14:21:01.197Z</updated>
  <id>http://www.handerh.top/</id>
  
  <author>
    <name>HanderH</name>
    <email>husj0423@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>GC-垃圾回收机制</title>
    <link href="http://www.handerh.top/2019/07/04/GC-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/"/>
    <id>http://www.handerh.top/2019/07/04/GC-垃圾回收机制/</id>
    <published>2019-07-04T12:27:11.000Z</published>
    <updated>2019-07-04T14:21:01.197Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-垃圾回收机制干嘛的"><a href="#一-垃圾回收机制干嘛的" class="headerlink" title="一.垃圾回收机制干嘛的"></a>一.垃圾回收机制干嘛的</h2><p>当我们运行一个程序时，创建的对象和一些变量是存在内存中，如果我们创建的对象和变量过多，它会占用大量的内存，在程序运行时，有一些对象和变量可能是无用的，我们没必要浪费内存去存储，垃圾回收机制就是帮我们回收这些无用的垃圾。</p><h2 id="二-垃圾回收机制主要针对哪些内存"><a href="#二-垃圾回收机制主要针对哪些内存" class="headerlink" title="二.垃圾回收机制主要针对哪些内存"></a>二.垃圾回收机制主要针对哪些内存</h2><p>JVM运行时内存区域主要包括五大部分，分别是程序计数器，本地方法栈，java虚拟栈，方法区，堆，由于，程序计数器，本地方法栈，java虚拟栈是每个线程私有的，当线程运行完毕时，会自动回收这些内存区域，而对于堆和方法区是线程共享的，这部分内存的分配和回收都是动态的，所以这方法去和堆是GC主要针对的区域。</p><h2 id="三-GC什么时候回收垃圾"><a href="#三-GC什么时候回收垃圾" class="headerlink" title="三.GC什么时候回收垃圾"></a>三.GC什么时候回收垃圾</h2><p>首先GC会通过特定的搜索算法找到没有被引用的对象，对这些对象进行垃圾回收</p><h3 id="搜索算法"><a href="#搜索算法" class="headerlink" title="搜索算法"></a>搜索算法</h3><h4 id="计数器法："><a href="#计数器法：" class="headerlink" title="计数器法："></a>计数器法：</h4><p>​    每一个对象都拥有一个对象引用计数器，当增加一个对该对象的引用时，引用计数器就会加一，减少一个对象引用，引用计数器就会减一，当该对象的引用计数器为0时，则认为该对象没有被引用是可以进行回收的，但是引用计数器有一个缺点，就是无法解决循环引用，比如A对象引用了B对象,B对象引用了A对象,但是这两个对象没有被任何的其它对象引用，这两个对象就无法回收了</p><h4 id="GC-Roots可达性分析"><a href="#GC-Roots可达性分析" class="headerlink" title="GC Roots可达性分析"></a>GC Roots可达性分析</h4><p>从一些GC ROOTS对象作为起点，向下搜索，搜索通过的路径为引用链，当一个对象没有被该引用链连接时，则认为该对象是无用的。</p><p>GC Roots对象包括虚拟机栈中的引用的对象，方法区域中的类静态属性引用的对象，方法区域中常量引用的对象。</p><h2 id="四-对象的引用是什么"><a href="#四-对象的引用是什么" class="headerlink" title="四.对象的引用是什么"></a>四.对象的引用是什么</h2><p>无论是引用计数器还是可达性分析，判断对象是否有用都与引用有关，那如何定义对象的引用。</p><p>Java中对象的引用分为四种级别，由高到低分别为：强引用，软引用，弱引用，虚引用</p><h4 id="强引用（Strong-Reference"><a href="#强引用（Strong-Reference" class="headerlink" title="强引用（Strong Reference):"></a>强引用（Strong Reference):</h4><p>强引用在我们每天写代码的时候都会用到，比如Object obj = new Object();如果一个对象被强引用引用，那么这个对象是不会被垃圾回收器回收的。</p><h4 id="软引用-SoftReference"><a href="#软引用-SoftReference" class="headerlink" title="软引用(SoftReference):"></a>软引用(SoftReference):</h4><p>如果一个对象具有软引用，当JVM内存空间充足的情况下，垃圾回收器不会回收它</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Object obj = new Object();</span><br><span class="line">SoftReference&lt;Object&gt; str = new SoftReference&lt;Object&gt;(obj);</span><br></pre></td></tr></table></figure><p>可以用来实现内存敏感的高速缓存.在jvm报告内存不足时，立刻清空所有软引用</p><p>gc回收软引用的过程</p><ol><li>首先将SoftReference引用的obj置空</li><li>标记new Object()为finalize</li><li>回收内存，并添加到RefererceQueue.(如果有的话)</li></ol><h4 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h4><p>被弱引用引用的对象可有可无，只要被GC扫描到，随时都会被清除。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Object obj = new Object();</span><br><span class="line">WeakReference&lt;Object&gt; str = new WeakReference&lt;Object&gt;(obj);</span><br></pre></td></tr></table></figure><h4 id="虚引用"><a href="#虚引用" class="headerlink" title="虚引用"></a>虚引用</h4><p>如果一个对象持有虚引用，就跟没有一样，随时都可以被回收</p><p>虚引用与软引用和弱引用不同。</p><h2 id="五-回收算法"><a href="#五-回收算法" class="headerlink" title="五.回收算法"></a>五.回收算法</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一-垃圾回收机制干嘛的&quot;&gt;&lt;a href=&quot;#一-垃圾回收机制干嘛的&quot; class=&quot;headerlink&quot; title=&quot;一.垃圾回收机制干嘛的&quot;&gt;&lt;/a&gt;一.垃圾回收机制干嘛的&lt;/h2&gt;&lt;p&gt;当我们运行一个程序时，创建的对象和一些变量是存在内存中，如果我们创建
      
    
    </summary>
    
      <category term="jvm" scheme="http://www.handerh.top/categories/jvm/"/>
    
    
      <category term="jvm" scheme="http://www.handerh.top/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>工厂模式</title>
    <link href="http://www.handerh.top/2019/07/04/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.handerh.top/2019/07/04/工厂模式/</id>
    <published>2019-07-04T08:51:29.000Z</published>
    <updated>2019-07-04T11:31:51.401Z</updated>
    
    <content type="html"><![CDATA[<h3 id="java设计模式之工厂模式"><a href="#java设计模式之工厂模式" class="headerlink" title="java设计模式之工厂模式"></a>java设计模式之工厂模式</h3><p>什么是工厂模式：实现了对同一接口下一些类的实例的创建，定义了一个产生实例对象的接口，让其子类决定实例化哪个工厂类</p><a id="more"></a><h4 id="工厂方法模式："><a href="#工厂方法模式：" class="headerlink" title="工厂方法模式："></a>工厂方法模式：</h4><p>看栗子：</p><p>假设我们有一个游戏(Game)接口，它有两个实现类，一个是手机游戏，一个是电脑游戏，游戏都是由一个工厂生产的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public interface Game &#123;</span><br><span class="line"></span><br><span class="line">public void downLoad();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class PhoneGame implements Game&#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void downLoad() &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;下载手机游戏&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class ComputerGame implements Game&#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void downLoad() &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;下载电脑游戏&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//游戏工厂　负责生产游戏</span><br><span class="line">public class GameFactory &#123;</span><br><span class="line"></span><br><span class="line">public Game getPhoneGame() &#123;</span><br><span class="line">return new PhoneGame();</span><br><span class="line">&#125;</span><br><span class="line">public Game getComputerGame() &#123;</span><br><span class="line">return new ComputerGame();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h4><p>简单工厂模式对象的创建依赖于工厂，当我们新增一个对象时，需要更改工厂类</p><p>比如当增加一个新的电视游戏类时，我们需要在工厂类添加一个方法获取电视游戏对象</p><p>所以，为了避免更改工厂类，采用抽象工厂模式。</p><p>抽象工厂模式采用增加工厂类的方法来避免修改代码</p><p>还是上面的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public interface Game &#123;</span><br><span class="line"></span><br><span class="line">public void downLoad();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class PhoneGame implements Game&#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void downLoad() &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;下载手机游戏&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class ComputerGame implements Game&#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void downLoad() &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;下载电脑游戏&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提供一个抽象工厂负责创建游戏对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public interface Factory &#123;</span><br><span class="line"></span><br><span class="line">public Game getGame();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>真正创建对象的工厂</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class ComputerFactory implements Factory&#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Game getGame() &#123;</span><br><span class="line"></span><br><span class="line">return new ComputerGame();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class PhoneFactory implements Factory&#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Game getGame() &#123;</span><br><span class="line">return new PhoneGame();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们增加一个新的电视游戏类的时候，再创建一个电视游戏工厂就可以了。</p><p>说了这么多，那工厂模式有什么用呢？</p><p>首先工厂模式是为了帮我们创建对象的，那为什么要使用工厂模式呢，</p><p>工厂模式帮我们降低了耦合性，将对象的使用和创建分离开</p><p>降低代码重复使用，如果一个对象的创建需要很多初始化参数，我们不需要在每个需要它的类中去创建，在工厂类中创建一次就行。工厂类创建封装了创建对象的细节</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;java设计模式之工厂模式&quot;&gt;&lt;a href=&quot;#java设计模式之工厂模式&quot; class=&quot;headerlink&quot; title=&quot;java设计模式之工厂模式&quot;&gt;&lt;/a&gt;java设计模式之工厂模式&lt;/h3&gt;&lt;p&gt;什么是工厂模式：实现了对同一接口下一些类的实例的创建，定义了一个产生实例对象的接口，让其子类决定实例化哪个工厂类&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://www.handerh.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="java设计模式" scheme="http://www.handerh.top/tags/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>代理模式</title>
    <link href="http://www.handerh.top/2019/07/03/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.handerh.top/2019/07/03/代理模式/</id>
    <published>2019-07-03T12:06:35.000Z</published>
    <updated>2019-07-03T13:50:42.478Z</updated>
    
    <content type="html"><![CDATA[<h3 id="java的静态代理和动态代理"><a href="#java的静态代理和动态代理" class="headerlink" title="java的静态代理和动态代理"></a>java的静态代理和动态代理</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>代理模式是一种常见的设计模式，分为静态代理，动态代理。代理提供了一种让我们间接访问目标对象的方法，以便我们对目标对象实现基本的功能外，还可以增加一些额外的功能。</p><h4 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h4><p>代理类通过实现与目标类相同的接口，并在类中维护一个代理对象，通过构造方法传入目标对象，并赋值给代理对象。通过代理对象执行实现的接口方法，并实现增加功能的需求。</p><p>栗子：小明和小刚都待在宿舍，到了中午了，要去食堂吃饭，小明不想去，就叫小刚带饭，小刚答应了，带饭回来的时候捡到十块钱，于是小刚还帮小明多带了瓶饮料。小明吃完饭后，由于游戏开了，不想去丢饭盒，于是小刚又去帮他收拾。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">//接口</span><br><span class="line">public interface Lunch &#123;</span><br><span class="line"></span><br><span class="line">void eat();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">//小明</span><br><span class="line">public class XiaoMing implements Lunch&#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void eat() &#123;</span><br><span class="line">System.out.println(&quot;小明吃午饭&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//代理人小刚</span><br><span class="line">public class ProxyXiaoGang implements Lunch&#123;</span><br><span class="line"></span><br><span class="line">//代理对象　通过构造方法传入实际对象，并赋值给它</span><br><span class="line">private Lunch lunch;</span><br><span class="line">public ProxyXiaoGang(Lunch lunch) &#123;</span><br><span class="line">this.lunch = lunch;</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line">public void eat() &#123;</span><br><span class="line">System.out.println(&quot;我是带饭人小刚，帮小明带饭,顺便带了瓶饮料&quot;);</span><br><span class="line">lunch.eat();</span><br><span class="line">System.out.println(&quot;我是带饭人小刚，小明吃完了饭，我帮他收拾一下&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><p>由于静态代理每个代理类只能为一个接口服务，当接口过多时，会产生大量的的代理类，而动态代理可以解决这一点，它可以为一个类实现的所有接口服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">//param1:类加载器　param2:类实现的所有接口　param3:InvocationHander处理器</span><br><span class="line">List&lt;String&gt; listProxy= (List&lt;String&gt;)Proxy.newProxyInstance(list.getClass().getClassLoader(), list.getClass().getInterfaces(), new InvocationHandler() &#123;</span><br><span class="line">// proxy 代理对象的一个实例　method 当前要执行的方法 args:方法执行需要的参数</span><br><span class="line">@Override</span><br><span class="line">public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class="line"></span><br><span class="line">Object invoke = null;</span><br><span class="line">//如果是add方法，则对它增强</span><br><span class="line">if(method.getName().equals(&quot;add&quot;)) &#123;</span><br><span class="line">System.out.println(&quot;执行前&quot;);</span><br><span class="line">invoke = method.invoke(list, args[0]);</span><br><span class="line">System.out.println(&quot;执行后&quot;);</span><br><span class="line">&#125;</span><br><span class="line">return method.invoke(list, args[0]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">listProxy.add(&quot;hello&quot;);</span><br><span class="line">System.out.println(listProxy.get(0));</span><br></pre></td></tr></table></figure><p>总结：静态代理一个代理类只能为一个接口提供服务</p><p>　　　动态代理一个代理类可以为该类实现的所有接口服务</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;java的静态代理和动态代理&quot;&gt;&lt;a href=&quot;#java的静态代理和动态代理&quot; class=&quot;headerlink&quot; title=&quot;java的静态代理和动态代理&quot;&gt;&lt;/a&gt;java的静态代理和动态代理&lt;/h3&gt;&lt;h4 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot;
      
    
    </summary>
    
    
      <category term="java设计模式" scheme="http://www.handerh.top/tags/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>java类与类之间的关系</title>
    <link href="http://www.handerh.top/2019/07/03/java%E7%B1%BB%E4%B8%8E%E7%B1%BB%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB/"/>
    <id>http://www.handerh.top/2019/07/03/java类与类之间的关系/</id>
    <published>2019-07-03T11:08:36.000Z</published>
    <updated>2019-07-03T11:45:52.465Z</updated>
    
    <content type="html"><![CDATA[<h3 id="java类之间的关系"><a href="#java类之间的关系" class="headerlink" title="java类之间的关系"></a>java类之间的关系</h3><p>在java的面向对象的设计模式中，类与类之间的关系主要有６种。分别是依赖，关联，聚合，组合，继承，实现。其中，关联，聚合，组合仅仅在语义上有区别，在编程环境中的语法是一样的。</p><h4 id="依赖-Dependence"><a href="#依赖-Dependence" class="headerlink" title="依赖(Dependence)"></a>依赖(Dependence)</h4><p>它是一种use-a关系，表示一个类A用到了类B,也就是类A依赖类B。依赖关系在JAVA中体现为局部变量、方法的形参，或者对静态方法的调用。 </p><p><img src="https://handerh-1259550163.cos.ap-shanghai.myqcloud.com/java/class/dep.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class A&#123;</span><br><span class="line">    public void t(B b)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class B&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="关联关系（Association"><a href="#关联关系（Association" class="headerlink" title="关联关系（Association)"></a>关联关系（Association)</h4><p>一种连接关系，它使一个类知道另一个的属性和方法。在java中体现为成员变量。关联关系可以有单向关联和双向关联。</p><p><img src="https://handerh-1259550163.cos.ap-shanghai.myqcloud.com/java/class/asoci.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class A&#123;</span><br><span class="line">    B b;</span><br><span class="line">    public void t()&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class B&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="聚合关系-Aggregation"><a href="#聚合关系-Aggregation" class="headerlink" title="聚合关系(Aggregation)"></a>聚合关系(Aggregation)</h4><p>一种has-a关系，关联关系的一种，是整体和个体之间的关系，聚合关系的整体和个体是可分的，他们具有各自的生命周期。在java中表现形式与关联关系一致，只是语义上有区别。</p><p><img src="https://handerh-1259550163.cos.ap-shanghai.myqcloud.com/java/class/aggre.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class A&#123;</span><br><span class="line">    B b; //整体（Ａ）和部分（Ｂ）　</span><br><span class="line">    public void t()&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class B&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="组合关系-Composition"><a href="#组合关系-Composition" class="headerlink" title="组合关系(Composition)"></a>组合关系(Composition)</h4><p>一种contain-a关系，也是关联关系的一种。它表示的也是一种整体和部分的关系，但是整体和部分是不可分割的，具有相同的生命周期。在java中表现形式与关联关系一致，只是语义上有区别。</p><p><img src="https://handerh-1259550163.cos.ap-shanghai.myqcloud.com/java/class/com.png" alt></p><h4 id="继承-Inheritance"><a href="#继承-Inheritance" class="headerlink" title="继承(Inheritance)"></a>继承(Inheritance)</h4><p>“is-a”关系，用于表示一般和特殊之间的关系，在java中，表示类与类之间的父子关系，用extends关键字表示。</p><p><img src="https://handerh-1259550163.cos.ap-shanghai.myqcloud.com/java/class/inh.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class A&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">class B extends B&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实现-Implementation"><a href="#实现-Implementation" class="headerlink" title="实现(Implementation)"></a>实现(Implementation)</h4><p>表示一个类实现一个或多个接口,由实现类去完成接口的具体操作，在java中用关键字implementsbia表示。</p><p><img src="https://handerh-1259550163.cos.ap-shanghai.myqcloud.com/java/class/imp.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">interface A&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">class B implements A&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;java类之间的关系&quot;&gt;&lt;a href=&quot;#java类之间的关系&quot; class=&quot;headerlink&quot; title=&quot;java类之间的关系&quot;&gt;&lt;/a&gt;java类之间的关系&lt;/h3&gt;&lt;p&gt;在java的面向对象的设计模式中，类与类之间的关系主要有６种。分别是依赖，关
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hbase的基本操作</title>
    <link href="http://www.handerh.top/2019/07/02/hbase%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>http://www.handerh.top/2019/07/02/hbase基本操作/</id>
    <published>2019-07-02T07:06:41.000Z</published>
    <updated>2019-07-02T10:55:24.914Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-hbase环境搭建"><a href="#一-hbase环境搭建" class="headerlink" title="一.hbase环境搭建"></a>一.hbase环境搭建</h2><p>在操作hbase之前，肯定得先搭好环境。hbase的环境搭建其实也挺简单的，但前提是你配置好了hadoop和Zookeeper.</p><p>1.解压hbase的压缩包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf hbase-x-x.tar.gz -C 指定目录</span><br></pre></td></tr></table></figure><p>2.建立软连接，方便配置环境变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ln -s hbase-2.2.0/ hbase</span><br><span class="line"></span><br><span class="line">vi ~/.bashrc</span><br><span class="line"># 添加如下代码 自己的路径</span><br><span class="line">export HBASE_HOME=/home/master/software/hbase</span><br><span class="line">＃追加path</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin:$HADOOP_HOME/bin:$HADOOP_HOME/sbin:$ZK_HOME/bin:$HBASE_HOME/bin</span><br></pre></td></tr></table></figure><ol start="3"><li>进入hbase/conf/ 修改两个配置文件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">vi hbase-env.sh</span><br><span class="line"># 添加</span><br><span class="line">export JAVA_HOME=/home/master/software/jdk</span><br><span class="line">＃　指定不用内置的zookeeper</span><br><span class="line">export HBASE_MANAGES_ZK=false</span><br><span class="line"># 指定存放数据的文件　需要创建</span><br><span class="line">export HBASE_LOG_DIR=/home/master/software/data/hbase/logs</span><br><span class="line">export HBASE_PID_DIR=/home/master/software/data/hbase/pids</span><br><span class="line"></span><br><span class="line">vi hbase-site.xml </span><br><span class="line"># 添加</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line"> &lt;property&gt;</span><br><span class="line">    &lt;name&gt;hbase.rootdir&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;hdfs://hadoop01:9000/hbase&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;hbase.zookeeper.property.dataDir&lt;/name&gt;</span><br><span class="line">    &lt;!-- 指定自己配置的zk存放数据的位置-&gt;</span><br><span class="line">    &lt;value&gt;/home/master/software/data/zk&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">       &lt;name&gt;hbase.cluster.distributed&lt;/name&gt;</span><br><span class="line">       &lt;value&gt;true&lt;/value&gt;</span><br><span class="line">   &lt;/property&gt;</span><br><span class="line">       &lt;!--默认HMaster HTTP访问端口--&gt;</span><br><span class="line">   &lt;property&gt;</span><br><span class="line">       &lt;name&gt;hbase.master.info.port&lt;/name&gt;</span><br><span class="line">       &lt;value&gt;16010&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">       &lt;!--默认HRegionServer HTTP访问端口--&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">       &lt;name&gt;hbase.regionserver.info.port&lt;/name&gt;</span><br><span class="line">       &lt;value&gt;16030&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">       &lt;!--不使用默认内置的，配置独立的ZK集群地址，除了master，自己配了几台zookeeper，此处就配几台--&gt;</span><br><span class="line">   &lt;property&gt;</span><br><span class="line">       &lt;name&gt;hbase.zookeeper.quorum&lt;/name&gt;</span><br><span class="line">       &lt;value&gt;hadoop01:2181,hadoop02:2181,hadoop03:2181&lt;/value&gt;</span><br><span class="line">   &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><ol start="4"><li>创建配置文件指定的目录</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/software/data/hbase/logs</span><br><span class="line">mkdir -p ~/software/data/hbase/pids</span><br><span class="line">mkdir -p ~/software/data/hbase/logs</span><br></pre></td></tr></table></figure><ol start="5"><li>修改conf下的regionservers文件加入regoinserver的ip</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vi regionservers</span><br><span class="line"># 添加</span><br><span class="line">hadoop01</span><br><span class="line">hadoop02</span><br><span class="line">hadoop03</span><br></pre></td></tr></table></figure><ol start="6"><li>同步时间</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo date -s &quot;2019-7-2 14:10:10&quot;</span><br></pre></td></tr></table></figure><p>##　二.hbase的shell命令操作</p><p>命名空间的操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create_namespace &apos;hsj&apos; //创建一个命名空间</span><br><span class="line">list_namespace //查看namesoace</span><br><span class="line">drop_namespace &apos;hsj&apos; //删除namespace 删除的namespace一定要为空</span><br></pre></td></tr></table></figure><p>表的操作 ddl</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//创建表</span><br><span class="line">create &apos;hsj:emp&apos;,&#123;NAME =&gt; &apos;info&apos;,NAME =&gt; &apos;extrainfo&apos;,VERSIONS =&gt; 3&#125; //指定版本数</span><br><span class="line">create &apos;hsj:student&apos;,&apos;info&apos;</span><br><span class="line">//修改表</span><br><span class="line">alter &apos;hsj:student&apos;,&#123;NAME =&gt;&apos;info&apos;,VERSIONS =&gt;3&#125;</span><br><span class="line">//删除表</span><br><span class="line">disable &apos;hsj:student&apos;</span><br><span class="line">drop &apos;hsj:studen&apos;</span><br></pre></td></tr></table></figure><p>dml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//插入数据或修改</span><br><span class="line">put &apos;hsj:student&apos;,&apos;1001&apos;,&apos;info:name&apos;,&apos;zs&apos;</span><br><span class="line">put &apos;hsj:student&apos;,&apos;1002&apos;,&apos;info:name&apos;,&apos;li&apos;</span><br><span class="line">put &apos;hsj:student&apos;,&apos;1002&apos;,&apos;info:age&apos;,18</span><br><span class="line">//查询数据</span><br><span class="line">scan &apos;hsj:student&apos; //扫描全表</span><br><span class="line">get &apos;hsj:student&apos;,&apos;1001&apos;</span><br><span class="line">get &apos;hsj:student&apos;,&apos;1001&apos;,&apos;info:name&apos;</span><br><span class="line">//删除数据</span><br><span class="line">delete &apos;hsj:student&apos;,&apos;1001&apos;,&apos;info:name&apos;</span><br><span class="line">deleteall &apos;hsj:student&apos;,&apos;1002&apos;</span><br><span class="line">//查询表中数据有多少行</span><br><span class="line">count &apos;hsj:student&apos;</span><br><span class="line">//删除表中所有数据</span><br><span class="line">truncate &apos;hsj:student&apos;</span><br></pre></td></tr></table></figure><h2 id="三-读写数据的流程"><a href="#三-读写数据的流程" class="headerlink" title="三. 读写数据的流程"></a>三. 读写数据的流程</h2><ul><li>读数据的流程</li></ul><p><img src="https://handerh-1259550163.cos.ap-shanghai.myqcloud.com/java/hbase/read.png" alt></p><ol><li>Client向zk集群发送获取元数据所在的RegionServer</li><li>zk返回Meta所在的RegionServer</li><li>client读取RegionServer上的Meta，找到对应的读请求的RegionServer</li><li>client读取RegionServer上的Regizhogon数据，先读MemoStore中的数据，如果不存在,读取blockCache,读取StoreFile</li></ol><ul><li>写数据的流程</li></ul><p><img src="https://handerh-1259550163.cos.ap-shanghai.myqcloud.com/java/hbase/write.png" alt></p><ol><li>Client向zk集群发送获取元数据所在的RegionServer</li><li>zk返回Meta所在的RegionServer</li><li>client读取RegionServer上的Meta，找到对应的写请求的RegionServer</li><li>现将写操作写入RegionServer的Hlog,在将数据写入MemoStore</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一-hbase环境搭建&quot;&gt;&lt;a href=&quot;#一-hbase环境搭建&quot; class=&quot;headerlink&quot; title=&quot;一.hbase环境搭建&quot;&gt;&lt;/a&gt;一.hbase环境搭建&lt;/h2&gt;&lt;p&gt;在操作hbase之前，肯定得先搭好环境。hbase的环境搭建其实也挺
      
    
    </summary>
    
    
      <category term="hbase" scheme="http://www.handerh.top/tags/hbase/"/>
    
  </entry>
  
  <entry>
    <title>简单了解一下zookeeper</title>
    <link href="http://www.handerh.top/2019/07/02/%E7%AE%80%E5%8D%95%E4%BA%86%E8%A7%A3%E4%B8%80%E4%B8%8Bzookeeper/"/>
    <id>http://www.handerh.top/2019/07/02/简单了解一下zookeeper/</id>
    <published>2019-07-02T06:23:50.000Z</published>
    <updated>2019-07-02T07:04:50.878Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-Zookeeper是什么"><a href="#一-Zookeeper是什么" class="headerlink" title="一.Zookeeper是什么"></a>一.Zookeeper是什么</h2><p>Zookeeper是一个开源的分布式服务管理框架。它负责管理数据，接受观察者的注册，一旦数据的状态发生变化，Zookeeper负责通知观察者做出相应的反应。</p><h2 id="二-Zookeeper的特点"><a href="#二-Zookeeper的特点" class="headerlink" title="二.Zookeeper的特点"></a>二.Zookeeper的特点</h2><ol><li>一个领导者（leader)，多个跟随者（Follower)</li><li>全局数据一一致，每个Server保存一份相同的数据副本</li><li>更新请求按顺序执行，来自同一个Client的更新请求按其发送顺序依次执行</li><li>数据更新原子性</li><li>实时性，在一定时间范围内，Client能读到最新数据</li></ol><h2 id="三-Zookeeper全分布式的搭建"><a href="#三-Zookeeper全分布式的搭建" class="headerlink" title="三.Zookeeper全分布式的搭建"></a>三.Zookeeper全分布式的搭建</h2><p> 　1. 将包解压缩到指定路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf Zookeeper.x.x.tar.gz -C 指定路径</span><br></pre></td></tr></table></figure><ol start="2"><li>建立软连接，方便配置环境变量</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s Zookeeper.x.x zookeeper</span><br></pre></td></tr></table></figure><ol start="3"><li>配置环境变量</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vi .bashrc</span><br><span class="line"></span><br><span class="line">export ZK_HOME=/home/master/software/zookeeper</span><br><span class="line"># 在path后面追加</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin:$HADOOP_HOME/bin:$HADOOP_HOME/sbin:$ZK_HOME/bin:</span><br></pre></td></tr></table></figure><ol start="4"><li>修改文件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">cd zookeeper/conf/</span><br><span class="line"></span><br><span class="line">vi zoo.cfg </span><br><span class="line">tickTime=2000</span><br><span class="line"># 指定zk数据存放的位置</span><br><span class="line">dataDir=/home/master/software/data/zk/data</span><br><span class="line"># 指定zk日志存放的位置</span><br><span class="line">dataLogDir=/home/master/software/data/zk/dataLog</span><br><span class="line">clientPort=2181</span><br><span class="line">initLimit=5</span><br><span class="line">syncLimit=2</span><br><span class="line"># server.num后面的数字是myid中的值　myid后面要创建　hadoop0x是主机名</span><br><span class="line">server.1=hadoop01:2888:3888</span><br><span class="line">server.2=hadoop02:2888:3888</span><br><span class="line">server.3=hadoop03:2888:3888</span><br></pre></td></tr></table></figure><ol start="5"><li>在dataDir目录下新建myid文件,里面填写一个数字就行，要和上面的server匹配</li></ol><p>比如server.1,我就需要在dataDir下面myid填一个１</p><p>有没有发现zookeeper不需要指定master，是的，因为它自己会通过选举机制选出leader</p><p>##　四.选举机制</p><p>选举机制比较复杂，这里只说一个不够恰当的例子,稍微理解一下</p><p>选举机制其实是半数机制相关，一旦有超过半数的机器启动，zk就会选举出一个leader</p><p>选举机制说明<br>          假设有五台Zookeeper组成的集群，id总1-5，假设者五台机器依序启动，<br>        (1)服务器１启动，只有一台服务器，发出去的报文没有任何响应，所以它的选举状态一直是LOCKING状态<br>        (2)服务器２启动，与服务器１通信，交换自己的选举结果，这时候服务器１选择id较大服务器            ２，但是由于没 有到达半数以上，２也处于LOCKING<br>        (3)服务器３启动，１，２选择３，到达半数以上，３成为leader<br>        (4)服务器4启动，但是由于已经确定了３为leader，所以4是Follwer<br>        (5)服务器５启动，与４一样</p><h2 id="五-节点类型"><a href="#五-节点类型" class="headerlink" title="五.节点类型"></a>五.节点类型</h2><p>Zookeeper分为两种节点</p><p>持久：客户端和服务器断开连接后，创建的节点不删除。持久化节点有持久化编号目录节点，和没有编号的目录节点两种</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create -s /node  &quot;node&quot; 带编号的吃句话节点　，-s　带编号</span><br></pre></td></tr></table></figure><p>短暂:客户端和服务器断开连接后，创建的节点删除，临时节点有临时顺序编号目录节点 ，和没有编号的目录节点两种。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create -e -s /node2 &quot;node2&quot;  , -e 临时节点　-s :带编号</span><br></pre></td></tr></table></figure><h2 id="六-Zookeeper监听事件"><a href="#六-Zookeeper监听事件" class="headerlink" title="六.Zookeeper监听事件"></a>六.Zookeeper监听事件</h2><p>监听器原理：事件监听有三要素，分为事件源　事件对象（描述事件源产生的行为）监听器</p><pre><code>    事件对象事件源　－－－－－－》监听器（监听关注的事件）－－－－－》触发某个行为　</code></pre><p>zookeeper监听器原理：</p><p>zookeeper有两个线程，一个connect(网络连接),一个lisener，.connect会将注册的监听事件发送给zookeeper，zk收到后，会将注册的监听事件放进放进监听事件列表，当有数据或者路径发生变化时，zookeeper会将这个消息发送给listener线程，listener内部会调用process()方法。</p><p>zk写数据流程：</p><p> 　1. client向一个server发送写数据的请求，如果这个server不是leader，他会把请求转发给leader，leader会将写请求转发给每个server，server写成功后会通知leader<br>     2. 当半数以上的serverxie写成功后，leader就会告诉那个接受请求的server写数据成功了。<br>     3. server进而告诉客户端写数据成功</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一-Zookeeper是什么&quot;&gt;&lt;a href=&quot;#一-Zookeeper是什么&quot; class=&quot;headerlink&quot; title=&quot;一.Zookeeper是什么&quot;&gt;&lt;/a&gt;一.Zookeeper是什么&lt;/h2&gt;&lt;p&gt;Zookeeper是一个开源的分布式服务管理
      
    
    </summary>
    
    
      <category term="zookeeper" scheme="http://www.handerh.top/tags/zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>深入理解volatile</title>
    <link href="http://www.handerh.top/2019/07/01/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3volatile/"/>
    <id>http://www.handerh.top/2019/07/01/深入理解volatile/</id>
    <published>2019-07-01T11:24:39.000Z</published>
    <updated>2019-07-01T14:21:32.129Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-java内存模型"><a href="#一-java内存模型" class="headerlink" title="一.java内存模型"></a>一.java内存模型</h2><p>在说volatile之前，需要了解java的内存模型。java采用的是共享内存模型，线程之间的共享变量存储在主内存中，每个线程有一个私有的本地本地内存，本地内存存储了该线程读写共享变量的副本，如图</p><p><img src="https://handerh-1259550163.cos.ap-shanghai.myqcloud.com/java/Thread/java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B.png" alt></p><p>举个栗子：a = 100</p><p>一个线程需要修改a的值，必须先将a读到自己的本地内存，对a执行更新操作，再将a的值写回到主存中</p><h2 id="二-并发编程中的三个概念"><a href="#二-并发编程中的三个概念" class="headerlink" title="二.并发编程中的三个概念"></a>二.并发编程中的三个概念</h2><ol><li>原子性：一个操作或多个操作，要么全执行，要么全不执行。最典型的例子就是银行转账问题，</li></ol><p>假设A向B转账1000块钱，包含两个操作，A减去1000块钱,B加上1000块钱，假设这个操作不包含原子性，会发生一件很恐怖的事情，在A减去1000块钱后，操作突然中断，这导致A少了1000块钱，但是B没有增加，这1000块钱凭空消失，所有这两个操作必须具备原子性。</p><p>在java中，对变量的简单读取和赋值（将数值变量)才具备原子性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int a = 10 ;//原子性</span><br><span class="line">int b = a;//非原子性</span><br><span class="line">int count=a+1;//原子性</span><br></pre></td></tr></table></figure><ol start="2"><li>可见性: 当多个线程共享一个变量时，如果一个线程修改了该变量的值，其它线程会立刻知道</li></ol><p>java中通过volatile实现可见性，被volatile修饰的变量，当它被修改时，它会保证修改的值会立即被写回主存，当有其它线程需要的时候，拿到的是最新值</p><ol start="3"><li><p>有序性：程序执行的顺序会按照代码的顺序执行。在java中，编译器和处理器会对我们编写的代码优化，进行指令重排，指令重排不会影响单线程执行的结果，但是会影响多线程执行的结果。java中使用volatile可以禁止指令重排序。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//线程一执行的代码</span><br><span class="line">int a = 10;</span><br><span class="line">boolean start = true;</span><br><span class="line"></span><br><span class="line">//线程二执行的代码</span><br><span class="line">while(!start)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">对a的操作</span><br></pre></td></tr></table></figure><p>由于线程一的两行代码没有依赖关系，所以可能打算指令重排，线程一先执行boolean start = true;当还没有执行int a = 10;，线程二开始执行，执行对a的操作，但是由于a的值不是10，不是a的操作需要的结果，程序会出错,使用volatile可以避免这个问题</p></li></ol><h2 id="三-volatile"><a href="#三-volatile" class="headerlink" title="三.volatile"></a>三.volatile</h2><p>案例一：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">public class TestVolatile &#123;</span><br><span class="line"></span><br><span class="line">private /* volatile */ List&lt;String&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">public void t() &#123;</span><br><span class="line">while(true) &#123;</span><br><span class="line">if(list.size()==2) &#123;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">public void t2() &#123;</span><br><span class="line">for(int i=0;i&lt;3;i++) &#123;</span><br><span class="line">System.out.println(&quot;添加了第&quot;+i+&quot;个元素&quot;);</span><br><span class="line">list.add(&quot;a&quot;);</span><br><span class="line">try &#123;</span><br><span class="line">Thread.sleep(1000);</span><br><span class="line">&#125; catch (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">TestVolatile t = new TestVolatile();</span><br><span class="line">new Thread(new Runnable() &#123;</span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">t.t2();</span><br><span class="line">&#125;</span><br><span class="line">&#125;).start();//线程一</span><br><span class="line">new Thread(new Runnable() &#123;</span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">t.t();</span><br><span class="line">&#125;</span><br><span class="line">&#125;).start();//线程二</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不使用volatile关键字修饰，程序会进入到死循环，因为当线程一执行list.add()方法时，线程二不能马上获得线程一添加元素后list.size()的大小，当线程一将程序执行完，list.size()=3,那线程二永远也不可能中断。</p><p>使用volatile,当线程一执行list.add(),方法时，会改变list.size()的大小，线程二会立刻获取到修改后的新值，当list.size()=2时，线程二就会结束。</p><p>案例二：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public class TestVolatile2 &#123;</span><br><span class="line"></span><br><span class="line">boolean flag = true;</span><br><span class="line">public void t1() &#123;</span><br><span class="line">while(true) &#123;</span><br><span class="line">//System.out.println(&quot;111&quot;); // 使用这句化程序会正常结束　１</span><br><span class="line">//synchronized(this) &#123; &#125;//使用这句化程序会正常结束　２</span><br><span class="line">int a = 10; //使用这句化程序不会正常结束　３</span><br><span class="line">if(!flag) &#123;</span><br><span class="line">throw new IllegalArgumentException(Thread.currentThread().getName()+&quot;停止&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">TestVolatile2 t = new TestVolatile2();</span><br><span class="line">new Thread(new Runnable() &#123;</span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">t.t1();</span><br><span class="line">&#125;</span><br><span class="line">&#125;).start();</span><br><span class="line">try &#123;</span><br><span class="line">Thread.sleep(50);</span><br><span class="line">&#125; catch (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">t.flag = false;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+&quot;执行完毕&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用上面的１,2语句都可以让程序正常结束，但是使用3不行。为什么呢，因为synchronized也保证了可见性，但是为什么1可以呢？看下面println源码，是不是恍然大悟</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public void println(String x) &#123;</span><br><span class="line">       synchronized (this) &#123;</span><br><span class="line">           print(x);</span><br><span class="line">           newLine();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="四-volatile有没有保证原子性"><a href="#四-volatile有没有保证原子性" class="headerlink" title="四.volatile有没有保证原子性"></a>四.volatile有没有保证原子性</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public class SynchronizedTest1 &#123;</span><br><span class="line">private volatile int count = 0;</span><br><span class="line"></span><br><span class="line">public  void synchronizedTest1() &#123;</span><br><span class="line"></span><br><span class="line">for(int i=0;i&lt;1000;i++) &#123;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SynchronizedTest1 t1 = new SynchronizedTest1();</span><br><span class="line">for(int i=0;i&lt;10;i++) &#123;</span><br><span class="line">new Thread(new Runnable() &#123;</span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">t1.synchronizedTest1();</span><br><span class="line">&#125;</span><br><span class="line">&#125;).start();</span><br><span class="line">&#125;</span><br><span class="line">try &#123;</span><br><span class="line">Thread.sleep(3000);</span><br><span class="line">&#125; catch (InterruptedException e) &#123;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(t1.count);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>10个线程每个线程累加1000，如果volatile可以保证原子性的话，那么最后的结果就是10000,但是最后的运行结果是小于10000,也就是说volatile没有保证原子性</p><p>分析：假设现在count=10;线程一将count=10读到自己的本地内存，线程一阻塞，线程二运行，线程二将count=10读到自己的本地内存，对count进行加一操作(count=11)，但是还没写回到主存，线程二就被阻塞了，线程一开始执行，对count进行加一操作(count=11),将count=11写回到主存中，线程一执行完毕，线程二开始执行，但是由于线程二只剩写操作，不需要重新从主存读数据，直接将count=11写回到主存，线程二将线程一的值覆盖了。这就是最后的结果小于10000的原因。</p><p>总结：volatile保证了共享变量的可见性和有序性，但是没有保证原子性</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一-java内存模型&quot;&gt;&lt;a href=&quot;#一-java内存模型&quot; class=&quot;headerlink&quot; title=&quot;一.java内存模型&quot;&gt;&lt;/a&gt;一.java内存模型&lt;/h2&gt;&lt;p&gt;在说volatile之前，需要了解java的内存模型。java采用的是共享内
      
    
    </summary>
    
    
      <category term="java多线程" scheme="http://www.handerh.top/tags/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>谈谈synchronized</title>
    <link href="http://www.handerh.top/2019/07/01/%E8%B0%88%E8%B0%88synchronized/"/>
    <id>http://www.handerh.top/2019/07/01/谈谈synchronized/</id>
    <published>2019-07-01T07:11:22.000Z</published>
    <updated>2019-07-01T12:56:08.873Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-线程安全问题"><a href="#一-线程安全问题" class="headerlink" title="一.线程安全问题"></a>一.线程安全问题</h2><p>​    在单线程的情况下不会出现线程安全问题，而在多线程中，有可能会出现同时访问一个共享可变资源的情况。共享意味着该资源可被多个线程共享，可变意味着资源可被多个线程修改，这样很可能出现线程安全问题。</p><p>看一段线程安全的代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class SynchronizedTest1 &#123;</span><br><span class="line">private int count = 0;</span><br><span class="line">public void synchronizedTest1() &#123;</span><br><span class="line">for(int i=0;i&lt;1000;i++) &#123;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SynchronizedTest1 t1 = new SynchronizedTest1();</span><br><span class="line">for(int i=0;i&lt;10;i++) &#123;</span><br><span class="line">new Thread(new Runnable() &#123;</span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">t1.synchronizedTest1();</span><br><span class="line">&#125;</span><br><span class="line">&#125;).start();</span><br><span class="line">&#125;</span><br><span class="line">try &#123;</span><br><span class="line">Thread.sleep(3000);</span><br><span class="line">&#125; catch (InterruptedException e) &#123;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(t1.count);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里我开启了10个线程，每个线程我都将它们累加1000，结果应该是10*1000=10000,但是运行程序之后发现，结果count是小于10000,这是为什么呢？</p><p>这是由于count++不是原子操作，它由三步组成，首先要获取count的值，再对它进行加１，最后更新count.假设有两个线程，线程一先读到count=10;线程二这时候也读到count=10;线程二对count加１，</p><p>count=11,这时候线程二被阻塞，线程一开始执行，进行加１操作，并成功更新值，count=11,线程一执行完成后，线程二开始执行，由于线程二在之前已经进行了加１操作，这时候只需要将count写回到主存，最后count=11,两个线程在执行自增操作的时候，只加了１，这就是共享变量带来的并发问题。</p><h2 id="二-synchronized解决线程不安全"><a href="#二-synchronized解决线程不安全" class="headerlink" title="二.synchronized解决线程不安全"></a>二.synchronized解决线程不安全</h2><p>要解决上述的线程不安全问题，可以使用synchronized解决,我们只需要在方法上添加synchronized</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public synchronized void synchronizedTest1() &#123;</span><br><span class="line">for(int i=0;i&lt;1000;i++) &#123;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>synchronized是一种对象锁，用它来对某个方法或者代码块进行标记后，当某个线程对这个方法或者对象进行访问的时候，这个线程便获得了这把锁，别的线程只能等待该线程将锁释放，才能访问这个方法或者代码块。</p><h2 id="三-synchronized的实现机制"><a href="#三-synchronized的实现机制" class="headerlink" title="三.synchronized的实现机制"></a>三.synchronized的实现机制</h2><p>编写一个简单的同步代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class SynchronizedTest2 &#123;</span><br><span class="line">public  void test2() &#123;</span><br><span class="line">synchronized (this) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过javap -v SynchronizedTest2.class,获取字节码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Code:</span><br><span class="line">     stack=2, locals=3, args_size=1</span><br><span class="line">        0: aload_0</span><br><span class="line">        1: dup</span><br><span class="line">        2: astore_1</span><br><span class="line">        3: monitorenter</span><br><span class="line">        4: aload_1</span><br><span class="line">        5: monitorexit</span><br><span class="line">        6: goto          14</span><br><span class="line">        9: astore_2</span><br><span class="line">       10: aload_1</span><br><span class="line">       11: monitorexit</span><br><span class="line">       12: aload_2</span><br><span class="line">       13: athrow</span><br><span class="line">       14: return</span><br></pre></td></tr></table></figure><p>可以看到,使用synchronized进行同步操作，关键是需要对对象的monitor 进行获取，monitorenter让对象的锁计数器加１，monitorexit会让对象的锁计数器减一。</p><p>##　四.synchronized实现同步的方式</p><h3 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h3><p>添加在非静态方法的同步:获取的是实例对象的锁</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public synchronized void synchronizedTest1() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加在静态方法的同步：获取的是类对象的锁</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public synchronized static void synchronizedTest2() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="同步代码块"><a href="#同步代码块" class="headerlink" title="同步代码块"></a>同步代码块</h3><p>非静态方法中的代码块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public void synchronizedTest4() &#123;</span><br><span class="line">synchronized(this) &#123;　//实例对象的锁</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>静态方法中的代码块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public static void synchronizedTest3() &#123;</span><br><span class="line">    synchronized(SynchronizedTest1.class) &#123; //类对象的锁</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-使用synchronized需要注意的地方"><a href="#5-使用synchronized需要注意的地方" class="headerlink" title="5.使用synchronized需要注意的地方"></a>5.使用synchronized需要注意的地方</h2><ol><li><strong>对于 synchronized方法 或者 synchronized代码块，当出现异常时，JVM会自动释放当前线程占用的锁，因此不会由于异常导致出现死锁现象。</strong>　　</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public class TestException &#123;</span><br><span class="line"></span><br><span class="line">public synchronized void t1() &#123;</span><br><span class="line">while(true) &#123;</span><br><span class="line">int i = 10/0; // java.lang.ArithmeticException: / by zero 释放锁</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">public synchronized void t2() &#123;</span><br><span class="line">System.out.println(&quot;我是t2，我正在执行&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">TestException t = new TestException();</span><br><span class="line">new Thread(new Thread() &#123;</span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">t.t1();</span><br><span class="line">&#125;</span><br><span class="line">&#125;).start();</span><br><span class="line">try &#123;</span><br><span class="line">Thread.sleep(1000);</span><br><span class="line">&#125; catch (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">new Thread(new Thread() &#123;</span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">t.t2();</span><br><span class="line">&#125;</span><br><span class="line">&#125;).start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>当一个对象的synchronized的方法正在被一个线程访问，其它线程不能访问该对象的其它synchronized方法，但是可以访问其它非synchronized的方法。这应该很好理解，一个对象就一把锁，被一个线程占用后，其它线程必须等带该锁被释放。</strong></li><li><strong>synchronized锁住的是对象</strong></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">public class TestObject &#123;</span><br><span class="line"></span><br><span class="line">private Object obj = new Object();</span><br><span class="line">public void t1()  &#123;</span><br><span class="line">synchronized(obj) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName());</span><br><span class="line">obj = new Object(); //改变obj,指向另外一个对象</span><br><span class="line">try &#123;</span><br><span class="line">Thread.sleep(2000);</span><br><span class="line">&#125; catch (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Thread.currentThread().getName());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">TestObject t = new TestObject();</span><br><span class="line">new Thread(new Runnable() &#123;</span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">t.t1();</span><br><span class="line">&#125;</span><br><span class="line">&#125;).start();</span><br><span class="line">try &#123;</span><br><span class="line">Thread.sleep(500);</span><br><span class="line">&#125; catch (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">new Thread(new Runnable() &#123;</span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">t.t1();</span><br><span class="line">&#125;</span><br><span class="line">&#125;).start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线程１先执行，将obj = new Object(); 指向另外一个对象，这时候阻塞两秒，线程２执行，获取锁，由于obj是一个新对象所以获取锁成功,线程１和线程２交替执行</p><p>运行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Thread-0</span><br><span class="line">Thread-1</span><br><span class="line">Thread-0</span><br><span class="line">Thread-1</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一-线程安全问题&quot;&gt;&lt;a href=&quot;#一-线程安全问题&quot; class=&quot;headerlink&quot; title=&quot;一.线程安全问题&quot;&gt;&lt;/a&gt;一.线程安全问题&lt;/h2&gt;&lt;p&gt;​    在单线程的情况下不会出现线程安全问题，而在多线程中，有可能会出现同时访问一个共享可
      
    
    </summary>
    
    
      <category term="java多线程" scheme="http://www.handerh.top/tags/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>java IO</title>
    <link href="http://www.handerh.top/2019/06/30/java-IO/"/>
    <id>http://www.handerh.top/2019/06/30/java-IO/</id>
    <published>2019-06-30T02:59:26.000Z</published>
    <updated>2019-06-30T05:29:07.457Z</updated>
    
    <content type="html"><![CDATA[<h3 id="java中的流的类型"><a href="#java中的流的类型" class="headerlink" title="java中的流的类型"></a>java中的流的类型</h3><ul><li><p>按照流的方向：可以分为输入流(InpuStream)和输出流(OutputStream)</p></li><li><p>按照功能分类：节点流（从一个特定的地方读写数据）和处理流(对一个已经存在的流的封装)</p></li><li><p>按照数据的处理单位: 字节流和字符流</p><h3 id="流的分类"><a href="#流的分类" class="headerlink" title="流的分类"></a>流的分类</h3><h4 id="字节流："><a href="#字节流：" class="headerlink" title="字节流："></a>字节流：</h4><p><strong>节点流</strong>            </p><p><strong>FileInputStream</strong>:从文件系统获得输入的文件。</p><p>构造方法：</p><p>​    FileInputStream(File file)　连接到一个实际的文件</p><p>​    FileInputStream(String name)　根据路径连接到一个实际的文件</p><p>方法：</p><p>​    public int read(byte[] b)  throws IOException　将源文件的字节数据读到缓冲区              　　b，根据返回值判断文件数据是否已经读完，返回-1，代表文件数据已读完</p><p>​    public int read(byte[] b,  int off, int len)  throws IOException,将源文件的字节数                                       　　b,从数组的偏移量off位置开始存放长度为len的字节数，如果len&gt;b.length-off,将会抛出　    </p><pre><code>IndexOutOfBoundsException .</code></pre><p><strong>FileOutputStream</strong>：</p><p>构造方法</p><p>​    FileOutputStream(File file)　创建一个文件输出流写入指定的 File对象</p><pre><code>FileOutputStream(File file, boolean append)创建一个文件输出流写入指定的 File对象，append表示拼接，不覆盖</code></pre><p><strong>ByteArrayInputStream</strong>： 把字节数组转换为输入流</p><p>构造方法：</p><p>​        ByteArrayInputStream(byte[] buf) :使用一个字节数组当中所有的数据做为数据源，程序        可以像输入流方式一样读取字节，可以看做一个虚拟的文件，用文件的方式去读取它里面的数据。</p><p>​        ByteArrayInputStream(byte[] b,int offset,int length):从数组当中的第offset开始，一直取出length个这个字节做为数据源</p><p><strong>ByteArrayOutputStream</strong>    ： 把字节数组转换为输出流</p><p>构造方法：</p><p>​    ByteArrayOutputStream()创建一个新的字节数组输出流</p><p>​    ByteArrayOutputStream(int size)创建一个新的字节数组输出流，具有指定大小的缓冲容量，        　　以字节为单位的。</p><p><strong>处理流</strong></p><p><strong>BufferedInputStream</strong>: 缓冲输入流</p><p>构造方法：BufferedInputStream(InputStream in)</p><p>​        　BufferedInputStream(InputStream in, int size)　指定缓冲区的大小</p><p><strong>BufferedOutputStream</strong>：缓冲输出流</p><p>构造方法：</p><p>​        BufferedOutputStream(OutputStream out)创建一个新的缓冲输出流，将数据入到　　指定的基本输出流中</p><p>​        BufferedOutputStream(OutputStream out, int size)创建一个新的缓冲输出流，用指定的缓冲区大小写数据到指定的基本输出流中。</p><p><strong>DataInputStream</strong>:数据输入流，读时提供更多的类型</p><p>构造方法：DataInputStream(InputStream in)</p><p>方法：</p><p>​    readByte()——从输入流中读取1个字节，指它转换为byte类型的数据；<br>　　readLong()——从输入流中读取8个字节，指它转换为long类型的数据；<br>　　readFloat()——从输入流中读取4个字节，指它转换为float类型的数据；<br>　　readUTF()—— 从输入流中读取1到3个字节，指它转换为UTF-8字符编码的字符串；</p><p><strong>DataOutputStream</strong>：数据输出流，读时提供更多的类型</p><p>构造方法：</p><p>​        DataOutputStream(OutputStream out)创建一个新的数据输出流，将数据写入到指定的基本输出流中。</p><p>方法：</p><p>​    writeByte(int v)——将byte作为字节流输出<br>　　writeLong(long v)——将long作为输出流输出<br>　　writeFloat(float v)——将float作为输出流输出<br>　　writeUTF(String str)—— 将String作为输出流输出</p><p><strong>ObjectInputStream</strong>:对象输入流，主要用于对象序列化和反序列化</p><p>构造方法：</p><p>​    ObjectInputStream( )创建一个对象输入流</p><p>​    ObjectInputStream(InputStream in)创建一个对象输入流读取指定的输入流。</p><p><strong>ObjectOutputStream</strong>:对象输出流</p><p>构造方法：</p><p>​    ObjectOutputStream(OutputStream out)创建对象输出到指定的输出流</p></li></ul><h4 id="字符流："><a href="#字符流：" class="headerlink" title="字符流："></a>字符流：</h4><p>  <strong>节点流</strong></p><p>  <strong>CharArrayReader</strong> ：把字符数组转换为Reader，从字符数组中读取字符；</p><p>  构造方法：</p><p>  ​    CharArrayReader(char[] buf)创建从指定的字符数组的一个chararrayreader。<br>      CharArrayReader(char[] buf, int offset, int length创建从指定的字符数组的一个　chararrayreader。</p><p>  <strong>CharArrayWriter</strong>：将字符数组有Writer写出</p><p>  构造方法：</p><p>  ​    CharArrayWriter()　        </p><p>   <strong>StringReader</strong>  : 把字符串转换为Reader，从字符串中读取字符；</p><p>  构造方法：</p><p>  ​        StringReader(String s)</p><p>  <strong>StringWriter</strong> :将字符串有Writer写出</p><p>   <strong>FileReader</strong> : 从文件中读取字符；</p><p>  构造方法：</p><p>  ​    FileReader(File file)</p><p>  <strong>FileWriter</strong>:将字符写入到指定文件</p><p>  构造方法：</p><p>  ​    FileWriter(File file)</p><p>  ​    FileWriter(File file, boolean append)    </p><p>  ​    FileWriter(String fileName)</p><p>  ​    FileWriter(String fileName, boolean append)</p><p>  <strong>处理流</strong></p><p>  <strong>InputStreamReader</strong> : 过滤器，把InputStream转换为Reader，可以指定字符编码；</p><p>  构造方法：</p><p>  ​    InputStreamReader(InputStream in)创建一个inputstreamreader使用默认字符集。</p><p>  ​    InputStreamReader(InputStream in, Charset cs)创建一个inputstreamreader使用给定的字符集。</p><p>  ​    InputStreamReader(InputStream in, CharsetDecoder dec)创建一个inputstreamreader使用给定的字符集解码。<br>      InputStreamReader(InputStream in, String charsetName)创建一个inputstreamreader使用指定的字符集。</p><p>   <strong>OutputStreamWriter</strong>:将字符流转为字节流输出，可以指定字符编码；</p><p>  构造方法：</p><p>  ​    OutputStreamWriter(OutputStream out)创建一个outputstreamwriter使用默认的字符编码。<br>  OutputStreamWriter(OutputStream out, Charset cs)创建一个outputstreamwriter使用给定的字符集。<br>  OutputStreamWriter(OutputStream out, CharsetEncoder enc)创建一个outputstreamwriter使用给定的字符集编码。<br>  OutputStreamWriter(OutputStream out, String charsetName)创建一个outputstreamwriter使用指定的字符集。</p><p>   <strong>BufferedReader</strong>: 过滤器，为其他Reader提供读缓冲区，此外，它的readLine()方法能够读入一行字符串；</p><p>  构造方法：</p><p>  ​    BufferedReader(Reader in)创建一个使用默认大小输入缓冲区的缓冲字符输入流。<br>          BufferedReader(Reader in, int sz)创建一个使用指定大小的输入缓冲区的缓冲字符输入流。</p><p>  <strong>BufferedWriter</strong>:            </p><p>  构造方法：</p><p>  ​    BufferedWriter(Writer out)创建一个使用默认大小输出缓冲区的缓冲字符输出流</p><p>  ​    BufferedWriter(Writer out, int sz)创建一个新的缓冲字符输出流，该流使用给定大小的输出缓冲区。</p><h3 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h3><p>序列化：将对象写到输出流中，便于在网络中进行传输或者存储到文件中</p><p>反序列化:将输入流中的数据转化为对象，将从网络或文件中读取的字节数据转化为对象</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;java中的流的类型&quot;&gt;&lt;a href=&quot;#java中的流的类型&quot; class=&quot;headerlink&quot; title=&quot;java中的流的类型&quot;&gt;&lt;/a&gt;java中的流的类型&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;按照流的方向：可以分为输入流(InpuStream)和输出
      
    
    </summary>
    
    
      <category term="java" scheme="http://www.handerh.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Exception</title>
    <link href="http://www.handerh.top/2019/06/29/java%E7%9A%84exception/"/>
    <id>http://www.handerh.top/2019/06/29/java的exception/</id>
    <published>2019-06-29T10:01:54.000Z</published>
    <updated>2019-06-29T12:09:15.983Z</updated>
    
    <content type="html"><![CDATA[<h3 id="java中的异常分为哪几类"><a href="#java中的异常分为哪几类" class="headerlink" title="java中的异常分为哪几类"></a>java中的异常分为哪几类</h3><p>看图：</p><p><img src="https://handerh-1259550163.cos.ap-shanghai.myqcloud.com/java/exception/exception.png" alt></p><p>在java中，所有异常都都有一个共同的祖先Throwable,Throwable有两个重要的子类，Exception和error</p><ol><li>error:是程序无法处理的错误，表示程序有严重的错误，大多数错误都是jvm出现的问题，如StackOverError,OutOfMemoryError.</li><li>Exception:程序本身可以处理的异常。它有一个子类RuntimeException,这一类异常有java虚拟机抛出，如NullException(要访问的变量没有引用任何对象)，ArithmeticException(算术异常，整数除以０时)，ArrayIndexOutOfBoundsException(下标越界)</li></ol><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><ul><li>try:用于捕获异常，后面可以接多个catch,如果后面没有catch,则必须接finally</li><li>catch:用于处理try捕获的异常</li><li>finally:无论是否捕获或者处理异常，finally块中的语句都会被执行，当tyr或catch块中遇到return语句时，finally语句块将在方法返回之前执行</li></ul><h3 id="throw和throws的区别"><a href="#throw和throws的区别" class="headerlink" title="throw和throws的区别"></a>throw和throws的区别</h3><ul><li>throw <ul><li>用在方法体中，表示抛出异常，由方法体内的语句处理</li><li>throw是抛出异常的一个动作，抛出的是一个异常实例，执行throw一定抛出了某种异常</li></ul></li><li>throws<ul><li>用在方法声明后面，表示如果抛出异常，由该方法的调用者处理</li><li>throws主要是用来声明这个方法可能会抛出某种异常，让它的使用者知道需要捕获的异常类型</li></ul></li></ul><h3 id="final-finally-finalize的区别"><a href="#final-finally-finalize的区别" class="headerlink" title="final,finally,finalize的区别"></a>final,finally,finalize的区别</h3><ul><li>final :用来声明属性，方法和类，表示属性不可变，方法不可覆盖，类不可继承</li><li>finally:异常处理语句结构的一部分，表示总是执行</li><li>finalize:Object的一个方法，在垃圾回收器执行的时候会调用被回收对象的此方法，当该方法被调用则代表该对象即将死亡。当我们主动去调用该方法并不会导致该对象的死亡，这是一个回调方法，不需要我们调用</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;java中的异常分为哪几类&quot;&gt;&lt;a href=&quot;#java中的异常分为哪几类&quot; class=&quot;headerlink&quot; title=&quot;java中的异常分为哪几类&quot;&gt;&lt;/a&gt;java中的异常分为哪几类&lt;/h3&gt;&lt;p&gt;看图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https
      
    
    </summary>
    
    
      <category term="java" scheme="http://www.handerh.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>equals</title>
    <link href="http://www.handerh.top/2019/06/29/equals/"/>
    <id>http://www.handerh.top/2019/06/29/equals/</id>
    <published>2019-06-29T03:14:16.000Z</published>
    <updated>2019-06-29T08:49:39.961Z</updated>
    
    <content type="html"><![CDATA[<h2 id="equals-方法与-的区别"><a href="#equals-方法与-的区别" class="headerlink" title="equals()方法与==的区别"></a>equals()方法与==的区别</h2><ul><li>==:对于基本类型比较的是值，对于引用类型比较的是地址</li></ul><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">int a = 10;</span><br><span class="line">int b = 10;</span><br><span class="line">System.out.println(a == b);//true</span><br><span class="line">String str1 = &quot;hello&quot;;</span><br><span class="line">String str2 = &quot;hello&quot;;</span><br><span class="line">System.out.println(str1 == str2);//true</span><br><span class="line">String str3 = new String(&quot;hello&quot;);</span><br><span class="line">String str4 = new String(&quot;hello&quot;);</span><br><span class="line">System.out.println(str3 == str4);//false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里解释一下String类型在jvm是怎样存储的</p><p>如果使用“”创建String类型，如str1,str2,它会去常量池查找有没有当前我要创建的值，如果有直接将常量池的引用复制给该变量。第一次使用String str1 = “hello”，由于常量池中没有“hello”，它会在常量池中创建，在使用String str2 = “hello”，由于常量池中存在”hello”，str2它会直接引用这个值，所以str1 == str2为true</p><p><img src="https://handerh-1259550163.cos.ap-shanghai.myqcloud.com/java/equals1.png" alt></p><p>使用new创建String对象的时候，它回到常量池去查找有没有我要创建的值，如果有则拷贝一份到堆中，将该副本的引用赋值给变量。如果没有，则实例化该对象放到常量池，并且拷贝副本到堆中，将副本的引用复制给变量</p><p>如：String str3 = new String(“hello”)，常量池创建，拷贝一份到堆中，并副本赋值给str3,String str4 = new String(“hello”)，从常量池拷贝一份到堆中，并将副本引用赋值给str4.所有str3 == str4为false</p><p><img src="https://handerh-1259550163.cos.ap-shanghai.myqcloud.com/java/equals2.png" alt="2"></p><ul><li>equals:Object中的方法，在Object中比较的也是两个对象的地址,但是一般情况下，都要重写equals方法，来指定相等的规则。比如String类，重写equsls方法，比较的是String的值，而不是地址。</li></ul><p>案例：一个Student类，重写equals方法，如果它的name相等就认为他们是同一个学生。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public class Student &#123;</span><br><span class="line"></span><br><span class="line">private String name;</span><br><span class="line"></span><br><span class="line">private int age;</span><br><span class="line"></span><br><span class="line">public Student(String name, int age) &#123;</span><br><span class="line">this.name = name;</span><br><span class="line">this.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public boolean equals(Object obj) &#123;</span><br><span class="line">//两个对象的地址相等，一定是同一个对象</span><br><span class="line">if(this==obj) &#123;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">if(obj instanceof Student) &#123;</span><br><span class="line">Student s = (Student) obj;</span><br><span class="line">if(this.name.equals(s.name)) &#123;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Student s1 = new Student(&quot;zs&quot;, 18);</span><br><span class="line">Student s2 = new Student(&quot;zs&quot;, 20);</span><br><span class="line">System.out.println(s1.equals(s2));//true</span><br><span class="line">System.out.println(s1 == s2);//false</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="eausle的特性"><a href="#eausle的特性" class="headerlink" title="eausle的特性"></a>eausle的特性</h2><ol><li>自反性：a.equals(a)一定为true</li><li>对称性:  如果a.equals(b)为true，那么b.equals(a)一定也为true</li><li>传递性: a.equals(b)为true,b.equals(c)为true,那么a.equals(c)也为true</li></ol><h2 id="equals与hashcode"><a href="#equals与hashcode" class="headerlink" title="equals与hashcode"></a>equals与hashcode</h2><p>重写equals是否需要重写hashcode?</p><p>在api中是建议在重写equals时，我们有必要重写hashcode.</p><p>在一些用到hashcode的数据结构存储数据的时候，如hashset,是一定要重写的hashcode的</p><p>hashset存放元素的时候存放的是不重复的元素，它存数据的时候会根据元素的hash值和equals方法来判断是否添加，如果两个元素的hash值相同和equals方法返回为true,则认为元素相同，hashset不将它添加进去。这样就会产生一个问题，假设有 student1 = new Student(“zs”,18),student2 = new Student(“zs”,18),hashset在添加这两个对象的时候，只会将一个对象添加进去，但是如果不重写hashcode,hastset会认为这是两个不同的元素并将它添加进去，当我们在从hashset中取出数据的时候会发现取出了两个相同对象，这与hashset的的规则不符合，所以重写equals方需要重写hashcode.</p><p>hashset添加元素的判断</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if (p.hash == hash &amp;&amp;</span><br><span class="line">               ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br></pre></td></tr></table></figure><p>案例：一个Student类，重写equals,不重写hashcode,创建两个属性相等的对象，存放到hashset</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public boolean equals(Object obj) &#123;</span><br><span class="line">//两个对象的地址相等，一定是同一个对象</span><br><span class="line">if(this==obj) &#123;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">if(obj instanceof Student) &#123;</span><br><span class="line">Student s = (Student) obj;</span><br><span class="line">if(this.name.equals(s.name)&amp;&amp;this.age == s.age) &#123;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>存放到hashset,并输出到控制台</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">Student s1 = new Student(&quot;zs&quot;, 18);</span><br><span class="line">Student s2 = new Student(&quot;zs&quot;, 18);</span><br><span class="line"></span><br><span class="line">HashSet&lt;Student&gt; set = new HashSet&lt;&gt;();</span><br><span class="line">set.add(s1);</span><br><span class="line">set.add(s2);</span><br><span class="line">Iterator&lt;Student&gt; iterator = set.iterator();</span><br><span class="line">while(iterator.hasNext()) &#123;</span><br><span class="line">Student next = iterator.next();</span><br><span class="line">System.out.println(next);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><p><img src="https://handerh-1259550163.cos.ap-shanghai.myqcloud.com/java/equals3.png" alt="3"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;equals-方法与-的区别&quot;&gt;&lt;a href=&quot;#equals-方法与-的区别&quot; class=&quot;headerlink&quot; title=&quot;equals()方法与==的区别&quot;&gt;&lt;/a&gt;equals()方法与==的区别&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;==:对于基本类型比较的是值，对于引用类型比较的是地址&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://www.handerh.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>clone() 浅拷贝与深拷贝</title>
    <link href="http://www.handerh.top/2019/06/29/clone-%E6%B5%85%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
    <id>http://www.handerh.top/2019/06/29/clone-浅拷贝与深拷贝/</id>
    <published>2019-06-29T02:19:55.000Z</published>
    <updated>2019-06-29T07:40:33.128Z</updated>
    
    <content type="html"><![CDATA[<h3 id="clone的用法"><a href="#clone的用法" class="headerlink" title="clone的用法"></a>clone的用法</h3><p>用来复制一个对象的副本，产生一个新的对象，新对象的属性与原对象的属性一致，而且原对象的改变不影响新对象</p><p>克隆有浅拷贝与深拷贝，用的时候一定要注意</p><a id="more"></a><p>使用对象的clone()方法时，需要实现Cloneable接口,这是一个标志接口，不提供任何抽象方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public interface Cloneable &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><p>先来看一段代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class Persion implements Cloneable&#123;</span><br><span class="line"></span><br><span class="line">private int age;</span><br><span class="line">private String name;</span><br><span class="line"></span><br><span class="line">public Persion(int age, String name) &#123;</span><br><span class="line">        </span><br><span class="line">this.age = age;</span><br><span class="line">this.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">protected Object clone() throws CloneNotSupportedException &#123;</span><br><span class="line"></span><br><span class="line">return super.clone();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) throws CloneNotSupportedException &#123;</span><br><span class="line"></span><br><span class="line">Persion p = new Persion(18,&quot;zｈang&quot;);</span><br><span class="line">Persion p2 = (Persion) p.clone();</span><br><span class="line">System.out.println(p.name == p2.name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它的打印结果是什么呢？</p><p>true</p><p>没看错，就是这个结果，有没有困惑的地方？这就是由于浅拷贝导致的。看张图：</p><p><img src="https://handerh-1259550163.cos.ap-shanghai.myqcloud.com/java/clone1.png" alt></p><p>由于name是String类型，拷贝的只是它的引用,所以他们的name的地址值是相等的</p><p>那怎样将它改为深拷贝呢？</p><p>如果是引用类型，我们需要重新在原对象的基础上重新创建出一个对象。</p><p>例如，将上面改为深拷贝，只需要修改一下clone方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected Object clone() throws CloneNotSupportedException &#123;</span><br><span class="line"></span><br><span class="line">String newName = new String(this.name);//拷贝原对象的name值</span><br><span class="line">Persion p  = (Persion)super.clone();</span><br><span class="line">p.name = newName;</span><br><span class="line">return p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://handerh-1259550163.cos.ap-shanghai.myqcloud.com/java/clone2.png" alt></p><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><p>再来看一个深拷贝的例子：</p><p>A要实现深拷贝，必须要求其属性中含有的引用类型也必须进行深拷贝，也就是要求B要进行深拷贝</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">class A implements Cloneable&#123;</span><br><span class="line"></span><br><span class="line">  int id;</span><br><span class="line"> B b;</span><br><span class="line"> </span><br><span class="line">public A(int id, B b) &#123;</span><br><span class="line"></span><br><span class="line">this.id = id;</span><br><span class="line">this.b = b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">protected Object clone() throws CloneNotSupportedException &#123;</span><br><span class="line">//深拷贝</span><br><span class="line">B nb = (B) b.clone();</span><br><span class="line">A na = (A) super.clone();</span><br><span class="line">na.b = nb;</span><br><span class="line"></span><br><span class="line">return na;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class B implements Cloneable &#123;</span><br><span class="line"></span><br><span class="line"> String name;</span><br><span class="line"> B(String name) &#123;</span><br><span class="line"></span><br><span class="line">this.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">protected Object clone() throws CloneNotSupportedException &#123;</span><br><span class="line"></span><br><span class="line">B b = (B) super.clone();</span><br><span class="line">String sname = new String(name);</span><br><span class="line">b.name = sname;</span><br><span class="line">return b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;clone的用法&quot;&gt;&lt;a href=&quot;#clone的用法&quot; class=&quot;headerlink&quot; title=&quot;clone的用法&quot;&gt;&lt;/a&gt;clone的用法&lt;/h3&gt;&lt;p&gt;用来复制一个对象的副本，产生一个新的对象，新对象的属性与原对象的属性一致，而且原对象的改变不影响新对象&lt;/p&gt;
&lt;p&gt;克隆有浅拷贝与深拷贝，用的时候一定要注意&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://www.handerh.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Flume</title>
    <link href="http://www.handerh.top/2019/06/27/Flume/"/>
    <id>http://www.handerh.top/2019/06/27/Flume/</id>
    <published>2019-06-27T06:23:30.000Z</published>
    <updated>2019-06-28T08:48:12.959Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-Flume是什么"><a href="#一-Flume是什么" class="headerlink" title="一.Flume是什么"></a>一.Flume是什么</h2><p>Flume是一个分布式的，可靠的，高可用的海量日志采集系统，以Event为单位进行传输</p><h2 id="二-Flume的三大组件"><a href="#二-Flume的三大组件" class="headerlink" title="二.Flume的三大组件"></a>二.Flume的三大组件</h2><h3 id="source数据输入端的常见类型"><a href="#source数据输入端的常见类型" class="headerlink" title="source数据输入端的常见类型"></a>source数据输入端的常见类型</h3><ul><li>spooling directory :文件中的数据</li><li>exec :执行linux的命令，监控文件数据</li><li>syslog:文件日志</li><li>avro:序列化框架</li><li>netcat:监听端口</li></ul><a id="more"></a><h3 id="channel缓冲区"><a href="#channel缓冲区" class="headerlink" title="channel缓冲区"></a>channel缓冲区</h3><p>  位于Source和Sink,flume自带两种缓冲区Memory Channel,File Channel</p><ul><li>Memoey Channel :基于内存缓存，在不关心数据丢失的情况下使用</li><li>File Channel : 持久化Channel,不易丢失数据</li></ul><h3 id="sink数据输出端"><a href="#sink数据输出端" class="headerlink" title="sink数据输出端"></a>sink数据输出端</h3><p>常见的目的地包括Hdfs,Kafka,logger,avro,file</p><h2 id="三-Flume的操作"><a href="#三-Flume的操作" class="headerlink" title="三.Flume的操作"></a>三.Flume的操作</h2><h3 id="1-监控指定端口，并采集数据，输出到控制台"><a href="#1-监控指定端口，并采集数据，输出到控制台" class="headerlink" title="1.监控指定端口，并采集数据，输出到控制台"></a>1.监控指定端口，并采集数据，输出到控制台</h3><p>agent:</p><p>source使用netcat,监控指定的端口</p><p>先检测要监听的端口是否已经被占用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo netstat -tunlp | grep 44444</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo netstat -tunlp | grep 44444</span><br><span class="line">参数说明：</span><br><span class="line">-t:tcp -u:udp -n:网络连接　-l:listener p:进程</span><br></pre></td></tr></table></figure><p>channel使用memory</p><p>sink使用logger</p><p>创一个配置文件:vi netcat.flm</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># Name the components on this agent</span><br><span class="line">a1.sources = r1  // a1:agent的名称 r1:source的名称</span><br><span class="line">a1.sinks = k1// k1:sink的名称</span><br><span class="line">a1.channels = c1　//c1:channel的名称</span><br><span class="line"></span><br><span class="line"># Describe/configure the source</span><br><span class="line">a1.sources.r1.type = netcat　</span><br><span class="line">a1.sources.r1.bind = localhost //绑定本机</span><br><span class="line">a1.sources.r1.port = 44444//监听对应端口</span><br><span class="line"></span><br><span class="line"># Describe the sink</span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line"></span><br><span class="line"># Use a channel which buffers events in memory</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line"></span><br><span class="line"># Bind the source and sink to the channel</span><br><span class="line">a1.sources.r1.channels = c1　// source输出到指定channel</span><br><span class="line">a1.sinks.k1.channel = c1//channel到指定的sink</span><br></pre></td></tr></table></figure><p>执行命令，启动agent：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">flume-ng agent -c flume/conf/ -f netcat.flm -n a1 </span><br><span class="line">-Dflume.root.logger=INFO,console</span><br><span class="line">//-c:指定flume的配置文件　－f:指定要执行的配置文件　-n:agent的名字，要与配置中一致</span><br></pre></td></tr></table></figure><p>使用telnet测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet local host message</span><br></pre></td></tr></table></figure><h3 id="2-实时采集数据并输出到控制台"><a href="#2-实时采集数据并输出到控制台" class="headerlink" title="2.实时采集数据并输出到控制台"></a>2.实时采集数据并输出到控制台</h3><p>agent:</p><p>​    source使用exec</p><p>​    配置文件 vi exec.flm</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># Name the components on this agent</span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line"></span><br><span class="line"># Describe/configure the source</span><br><span class="line">a1.sources.r1.type = exec</span><br><span class="line">a1.sources.r1.command = tail -F /home/briup/log/test.log //要监控的文件</span><br><span class="line"># 命令从-c后的字符串读取</span><br><span class="line">a1.sources.r1.shell = /bin/sh -c</span><br><span class="line"></span><br><span class="line"># Describe the sink</span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line"></span><br><span class="line"># Use a channel which buffers events in memory</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line"># Bind the source and sink to the channel</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure><p>运行agent</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flume-ng agent -c flume/conf/ -f exec.flm -n a1 -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure><h3 id="3-Spool监测配置的目录下新增的文件"><a href="#3-Spool监测配置的目录下新增的文件" class="headerlink" title="3.Spool监测配置的目录下新增的文件"></a>3.Spool监测配置的目录下新增的文件</h3><p>agent: spooldir</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir spool //先创建一个目录，指定这个目录为要监听的目录</span><br></pre></td></tr></table></figure><p>配置文件：vi  spool.flm</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line"></span><br><span class="line">a1.sources.r1.type = spooldir</span><br><span class="line">a1.sources.r1.spoolDir =/home/master/spool</span><br><span class="line">a1.sources.r1.fileHeader = true</span><br><span class="line"></span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line"></span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line"></span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure><p>启动agent</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flume-ng agent -c flume/conf/ -f spool.flm -n a1 -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure><h3 id="4-Syslogtcp监听TCP的端口做为数据源"><a href="#4-Syslogtcp监听TCP的端口做为数据源" class="headerlink" title="4.Syslogtcp监听TCP的端口做为数据源"></a>4.Syslogtcp监听TCP的端口做为数据源</h3><p>agent:syslogtcp</p><p>vi syslogtcp.flm //配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line"></span><br><span class="line">a1.sources.r1.type = syslogtcp</span><br><span class="line">a1.sources.r1.port = 5140</span><br><span class="line">a1.sources.r1.host = localhost</span><br><span class="line"></span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line"></span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure><p>启动agent</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flume-ng agent -c flume/conf/ -f syslogtcp.flm -n a1 -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;hello world&quot; | nc localhost 5140</span><br></pre></td></tr></table></figure><h2 id="三-agent执行原理"><a href="#三-agent执行原理" class="headerlink" title="三.agent执行原理"></a>三.agent执行原理</h2><ol><li>source接受事件</li><li>channel处理器处理事件后，被拦截器拦截</li><li>拦截器处理后，进入channel选择器，根据channel选择器的选择结果，将事件写入对应的channel</li><li>Sink选择器选择其中一个Sink去获取Channel数据，并将数据写入到下一个阶段</li></ol><h4 id="channel选择器："><a href="#channel选择器：" class="headerlink" title="channel选择器："></a>channel选择器：</h4><pre><code>1. Replicating Channel Selector:将source发过来的events发往所有channel   2. Multiplexing channel Selector:可以将事件配置发往哪些Channel</code></pre><h2 id="五-flume的高可用"><a href="#五-flume的高可用" class="headerlink" title="五.flume的高可用"></a>五.flume的高可用</h2><h3 id="1-故障转移"><a href="#1-故障转移" class="headerlink" title="1.故障转移"></a>1.故障转移</h3><p>利用备份agent，当原来的agent挂掉后，切换到备份agent,需要使用到一个前置agent，或者是一个java程序来读取原来的数据，通过sink组(processor)输出到不同的agent.</p><p>配置实现</p><p>首先配置前置的agent，vi pre_flm</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1 k2</span><br><span class="line">a1.channels = c1 c2</span><br><span class="line">#这个是配置failover的关键，需要有一个sink group</span><br><span class="line">a1.sinkgroups = g1</span><br><span class="line">a1.sinkgroups.g1.sinks = k1 k2</span><br><span class="line">#处理的类型是failover</span><br><span class="line">a1.sinkgroups.g1.processor.type = failover</span><br><span class="line">#优先级，数字越大优先级越高，每个sink的优先级必须不相同</span><br><span class="line">a1.sinkgroups.g1.processor.priority.k1 = 5</span><br><span class="line">a1.sinkgroups.g1.processor.priority.k2 = 10</span><br><span class="line">#设置为10秒，当然可以根据你的实际状况更改成更快或者很慢</span><br><span class="line">a1.sinkgroups.g1.processor.maxpenalty = 10000</span><br><span class="line">  </span><br><span class="line"># Describe/configure the source</span><br><span class="line">a1.sources.r1.type = syslogtcp</span><br><span class="line">a1.sources.r1.port = 5140</span><br><span class="line">a1.sources.r1.channels = c1 c2</span><br><span class="line">a1.sources.r1.selector.type = replicating</span><br><span class="line"></span><br><span class="line"># Describe the sink</span><br><span class="line">a1.sinks.k1.type = avro</span><br><span class="line">a1.sinks.k1.channel = c1</span><br><span class="line">a1.sinks.k1.hostname = localhost</span><br><span class="line">a1.sinks.k1.port = 5555</span><br><span class="line"> </span><br><span class="line">a1.sinks.k2.type = avro</span><br><span class="line">a1.sinks.k2.channel = c2</span><br><span class="line">a1.sinks.k2.hostname = localhost</span><br><span class="line">a1.sinks.k2.port = 6666</span><br><span class="line">  </span><br><span class="line"># Use a channel which buffers events in memory</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line">  </span><br><span class="line">a1.channels.c2.type = memory</span><br><span class="line">a1.channels.c2.capacity = 1000</span><br><span class="line">a1.channels.c2.transactionCapacity = 100</span><br></pre></td></tr></table></figure><p>第二配置agent与back_agent　vi agent.flm　vi back_agent.flm</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">#agent.flm</span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line">Describe/configure the source</span><br><span class="line">a1.sources.r1.type = avro</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sources.r1.bind = 0.0.0.0</span><br><span class="line">a1.sources.r1.port = 6666 </span><br><span class="line">Describe the sink</span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line">Use a channel which buffers events in memory</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line">Bind the source and sink to the channel</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br><span class="line"></span><br><span class="line">#back_agent.flm</span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line">Describe/configure the source</span><br><span class="line">a1.sources.r1.type = avro</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sources.r1.bind = 0.0.0.0</span><br><span class="line">a1.sources.r1.port = 5555</span><br><span class="line">Describe the sink</span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line">Use a channel which buffers events in memory</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line">Bind the source and sink to the channel</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure><p>然后就可以使用命令启动这些配置了，先启动agent和back_agent，再启动pre_flm</p><p>然后向pre_flm发送数据，发现agent会接受到数据，使用<code>crtl c</code>关闭agent，会发现back_agent可以接受到数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">flume-ng agent -c flume/conf/ -f pre.flm -n a1 -Dflume.root.logger=INFO,console</span><br><span class="line"></span><br><span class="line">flume-ng agent -c flume/conf/ -f agent.flm -n a1 -Dflume.root.logger=INFO,console</span><br><span class="line"></span><br><span class="line">flume-ng agent -c flume/conf/ –f agent_back.flm -n a1 -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure><h3 id="2-负载均衡"><a href="#2-负载均衡" class="headerlink" title="2.负载均衡"></a>2.负载均衡</h3><p>利用前置的agent，通过processor向多个agent轮询的发送数据</p><p>首先配置前置的agent，vi pre_flm</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1 k2</span><br><span class="line">a1.channels = c1 c2</span><br><span class="line">  </span><br><span class="line">#这个是配置Load balancing的关键，需要有一个sink group</span><br><span class="line">a1.sinkgroups = g1</span><br><span class="line">a1.sinkgroups.g1.sinks = k1 k2</span><br><span class="line"></span><br><span class="line">a1.sinkgroups.g1.processor.type = load_balance</span><br><span class="line">#是否是开启退避功能</span><br><span class="line">a1.sinkgroups.g1.processor.backoff = true</span><br><span class="line">＃轮询</span><br><span class="line">a1.sinkgroups.g1.processor.selector = round_robin</span><br><span class="line">  </span><br><span class="line"># Describe/configure the source</span><br><span class="line">a1.sources.r1.type = avro</span><br><span class="line">a1.sources.r1.bind = 0.0.0.0</span><br><span class="line">a1.sources.r1.port = 5140</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">  </span><br><span class="line"># Describe the sink</span><br><span class="line">a1.sinks.k1.type = avro</span><br><span class="line">a1.sinks.k1.channel = c1</span><br><span class="line">a1.sinks.k1.hostname = localhost</span><br><span class="line">a1.sinks.k1.port = 5555</span><br><span class="line">  </span><br><span class="line">a1.sinks.k2.type = avro</span><br><span class="line">a1.sinks.k2.channel = c2</span><br><span class="line">a1.sinks.k2.hostname = localhost</span><br><span class="line">a1.sinks.k2.port = 6666</span><br><span class="line">  </span><br><span class="line"># Use a channel which buffers events in memory</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line">a1.channels.c2.type = memory</span><br></pre></td></tr></table></figure><p>第二配置agent a与agnet b　vi a.flm　vi b.flm</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">#a.flm</span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line">  </span><br><span class="line"># Describe/configure the source</span><br><span class="line">a1.sources.r1.type = avro</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sources.r1.bind = 0.0.0.0</span><br><span class="line">a1.sources.r1.port = 5555</span><br><span class="line">  </span><br><span class="line"># Describe the sink</span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line">  </span><br><span class="line"># Use a channel which buffers events in memory</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line">  </span><br><span class="line"># Bind the source and sink to the channel</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#b.flm</span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line">  </span><br><span class="line"># Describe/configure the source</span><br><span class="line">a1.sources.r1.type = avro</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sources.r1.bind = 0.0.0.0</span><br><span class="line">a1.sources.r1.port = 5555</span><br><span class="line">  </span><br><span class="line"># Describe the sink</span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line">  </span><br><span class="line"># Use a channel which buffers events in memory</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line">  </span><br><span class="line"># Bind the source and sink to the channel</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一-Flume是什么&quot;&gt;&lt;a href=&quot;#一-Flume是什么&quot; class=&quot;headerlink&quot; title=&quot;一.Flume是什么&quot;&gt;&lt;/a&gt;一.Flume是什么&lt;/h2&gt;&lt;p&gt;Flume是一个分布式的，可靠的，高可用的海量日志采集系统，以Event为单位进行传输&lt;/p&gt;
&lt;h2 id=&quot;二-Flume的三大组件&quot;&gt;&lt;a href=&quot;#二-Flume的三大组件&quot; class=&quot;headerlink&quot; title=&quot;二.Flume的三大组件&quot;&gt;&lt;/a&gt;二.Flume的三大组件&lt;/h2&gt;&lt;h3 id=&quot;source数据输入端的常见类型&quot;&gt;&lt;a href=&quot;#source数据输入端的常见类型&quot; class=&quot;headerlink&quot; title=&quot;source数据输入端的常见类型&quot;&gt;&lt;/a&gt;source数据输入端的常见类型&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;spooling directory :文件中的数据&lt;/li&gt;
&lt;li&gt;exec :执行linux的命令，监控文件数据&lt;/li&gt;
&lt;li&gt;syslog:文件日志&lt;/li&gt;
&lt;li&gt;avro:序列化框架&lt;/li&gt;
&lt;li&gt;netcat:监听端口&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Flume" scheme="http://www.handerh.top/tags/Flume/"/>
    
  </entry>
  
  <entry>
    <title>java设计模式(单例模式)</title>
    <link href="http://www.handerh.top/2019/06/26/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.handerh.top/2019/06/26/java设计模式-单例模式/</id>
    <published>2019-06-26T12:17:01.000Z</published>
    <updated>2019-07-01T11:21:40.011Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设计模式之单例模式"><a href="#设计模式之单例模式" class="headerlink" title="设计模式之单例模式"></a>设计模式之单例模式</h2><h3 id="一-什么是单例模式"><a href="#一-什么是单例模式" class="headerlink" title="一.什么是单例模式"></a>一.什么是单例模式</h3><p>​    确保类只有一个实例，不会出现多个</p><a id="more"></a><h3 id="二-单例模式解决了什么问题"><a href="#二-单例模式解决了什么问题" class="headerlink" title="二.单例模式解决了什么问题"></a>二.单例模式解决了什么问题</h3><p>​    保证类在内存的对象唯一</p><h3 id="三-单例模式的两种形式"><a href="#三-单例模式的两种形式" class="headerlink" title="三.单例模式的两种形式"></a>三.单例模式的两种形式</h3><h4 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h4><pre><code>public class Single{    private static  Single instance = new Single();    private Single(){    }    public static Single getInstance(){        return instance;    }}</code></pre><p><strong>１．为什么叫这种模式为饿汉式？</strong></p><p>​    类在加载的时候就创建好了这个对象</p><p><strong>２．为什么构造方法是私有的，方法是静态的，属性也是静态的？</strong></p><p>​         首先单例模式只创建一个实例，是不能通过new去创建实例的，所以构造方法是私有的</p><p>​        第二不能通过实例去调用方法，只能通过类名去访问，所以方法是静态的 由于静态方法只能访                    </p><p>　　问静态的属性所以属性也是静态的。　    </p><ol start="3"><li><strong>恶汉式线程安全的，由于类加载是按需加载，且只加载一次，上述单利模式中，在类加载的时候就已经创建好了对象，并且在在整个声明周期中只创建一次</strong></li></ol><h4 id="懒汉式线程不安全"><a href="#懒汉式线程不安全" class="headerlink" title="懒汉式线程不安全"></a>懒汉式线程不安全</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class Single｛</span><br><span class="line"></span><br><span class="line">private static Single single = null;</span><br><span class="line"></span><br><span class="line">public Single&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static Single getInstance()&#123;</span><br><span class="line"></span><br><span class="line">if(single ==  null)&#123;</span><br><span class="line">single = new Single();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return single;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class Single&#123;</span><br><span class="line">    </span><br><span class="line">    private volatile static Single single = null;</span><br><span class="line">    </span><br><span class="line">    public static Single getInstance()&#123;</span><br><span class="line">    </span><br><span class="line">        if(single == null)&#123;  //如果single已经实例化，则不在去获取锁，提高效率</span><br><span class="line">            synchronized(Single.class)&#123;</span><br><span class="line">                if(single == null)&#123;</span><br><span class="line">                    single = new Single();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        return single;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>　volatile 关键是一定要加的</p><p>原因：single = new Single();　操作不是原子性的，它分为三步</p><pre><code>1. 分配内存空间2. 初始化对象3. 将初始化化的对象赋值给single</code></pre><p>如果不加volatile，它可能会进行指令重排，执行步骤可能变为：</p><ol><li>分配内存空间</li><li>将初始化的对象赋值给single</li><li>初始化对象</li></ol><p>假设两个线程，线程一和线程二都执行到synchronized代码块那一行，这时候线程一先抢到锁，进入同步代码块中，执行 single = new Single()，在single = new Single()还未执行完成时，也就是执行了指令重排后的第二步，这时候single不为空了，线程二开始执行，返回single,这个single是不完整的</p><p>​    </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;设计模式之单例模式&quot;&gt;&lt;a href=&quot;#设计模式之单例模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式之单例模式&quot;&gt;&lt;/a&gt;设计模式之单例模式&lt;/h2&gt;&lt;h3 id=&quot;一-什么是单例模式&quot;&gt;&lt;a href=&quot;#一-什么是单例模式&quot; class=&quot;headerlink&quot; title=&quot;一.什么是单例模式&quot;&gt;&lt;/a&gt;一.什么是单例模式&lt;/h3&gt;&lt;p&gt;​    确保类只有一个实例，不会出现多个&lt;/p&gt;
    
    </summary>
    
    
      <category term="java 设计模式" scheme="http://www.handerh.top/tags/java-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
