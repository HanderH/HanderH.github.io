<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hsj的个人博客</title>
  <icon>https://www.gravatar.com/avatar/0b5d6648195c1648e8c43af28a2b4905</icon>
  <subtitle>life and work</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-06-29T06:31:48.409Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>HanderH</name>
    <email>husj0423@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>equals</title>
    <link href="http://yoursite.com/2019/06/29/equals/"/>
    <id>http://yoursite.com/2019/06/29/equals/</id>
    <published>2019-06-29T03:14:16.000Z</published>
    <updated>2019-06-29T06:31:48.409Z</updated>
    
    <content type="html"><![CDATA[<h2 id="equals-方法与-的区别"><a href="#equals-方法与-的区别" class="headerlink" title="equals()方法与==的区别"></a>equals()方法与==的区别</h2><ul><li>==:对于基本类型比较的是值，对于引用类型比较的是地址</li></ul><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">int a = 10;</span><br><span class="line">int b = 10;</span><br><span class="line">System.out.println(a == b);//true</span><br><span class="line">String str1 = &quot;hello&quot;;</span><br><span class="line">String str2 = &quot;hello&quot;;</span><br><span class="line">System.out.println(str1 == str2);//true</span><br><span class="line">String str3 = new String(&quot;hello&quot;);</span><br><span class="line">String str4 = new String(&quot;hello&quot;);</span><br><span class="line">System.out.println(str3 == str4);//false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里解释一下String类型在jvm是怎样存储的</p><p>如果使用“”创建String类型，如str1,str2,它会去常量池查找有没有当前我要创建的值，如果有直接将常量池的引用复制给该变量。第一次使用String str1 = “hello”，由于常量池中没有“hello”，它会在常量池中创建，在使用String str2 = “hello”，由于常量池中存在”hello”，str2它会直接引用这个值，所以str1 == str2为true</p><p><img src="/.com//06/29/equals/1.png" alt></p><p>使用new创建String对象的时候，它回到常量池去查找有没有我要创建的值，如果有则拷贝一份到堆中，将该副本的引用赋值给变量。如果没有，则实例化该对象放到常量池，并且拷贝副本到堆中，将副本的引用复制给变量</p><p>如：String str3 = new String(“hello”)，常量池创建，拷贝一份到堆中，并副本赋值给str3,String str4 = new String(“hello”)，从常量池拷贝一份到堆中，并将副本引用赋值给str4.所有str3 == str4为false</p><p><img src="/.com//06/29/equals/2.png" alt></p><ul><li>equals:Object中的方法，在Object中比较的也是两个对象的地址,但是一般情况下，都要重写equals方法，来指定相等的规则。比如String类，重写equsls方法，比较的是String的值，而不是地址。</li></ul><p>案例：一个Student类，重写equals方法，如果它的name相等就认为他们是同一个学生。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public class Student &#123;</span><br><span class="line"></span><br><span class="line">private String name;</span><br><span class="line"></span><br><span class="line">private int age;</span><br><span class="line"></span><br><span class="line">public Student(String name, int age) &#123;</span><br><span class="line">this.name = name;</span><br><span class="line">this.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public boolean equals(Object obj) &#123;</span><br><span class="line">//两个对象的地址相等，一定是同一个对象</span><br><span class="line">if(this==obj) &#123;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">if(obj instanceof Student) &#123;</span><br><span class="line">Student s = (Student) obj;</span><br><span class="line">if(this.name.equals(s.name)) &#123;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Student s1 = new Student(&quot;zs&quot;, 18);</span><br><span class="line">Student s2 = new Student(&quot;zs&quot;, 20);</span><br><span class="line">System.out.println(s1.equals(s2));//true</span><br><span class="line">System.out.println(s1 == s2);//false</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="eausle的特性"><a href="#eausle的特性" class="headerlink" title="eausle的特性"></a>eausle的特性</h2><ol><li>自反性：a.equals(a)一定为true</li><li>对称性:  如果a.equals(b)为true，那么b.equals(a)一定也为true</li><li>传递性: a.equals(b)为true,b.equals(c)为true,那么a.equals(c)也为true</li></ol><h2 id="equals与hashcode"><a href="#equals与hashcode" class="headerlink" title="equals与hashcode"></a>equals与hashcode</h2><p>重写equals是否需要重写hashcode?</p><p>在api中是建议在重写equals时，我们有必要重写hashcode.</p><p>在一些用到hashcode的数据结构存储数据的时候，如hashset,是一定要重写的hashcode的</p><p>hashset存放元素的时候存放的是不重复的元素，它存数据的时候会根据元素的hash值和equals方法来判断是否添加，如果两个元素的hash值相同和equals方法返回为true,则认为元素相同，hashset不将它添加进去。这样就会产生一个问题，假设有 student1 = new Student(“zs”,18),student2 = new Student(“zs”,18),hashset在添加这两个对象的时候，只会将一个对象添加进去，但是如果不重写hashcode,hastset会认为这是两个不同的元素并将它添加进去，当我们在从hashset中取出数据的时候会发现取出了两个相同对象，这与hashset的的规则不符合，所以重写equals方需要重写hashcode.</p><p>hashset添加元素的判断</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if (p.hash == hash &amp;&amp;</span><br><span class="line">               ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br></pre></td></tr></table></figure><p>案例：一个Student类，重写equals,不重写hashcode,创建两个属性相等的对象，存放到hashset</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public boolean equals(Object obj) &#123;</span><br><span class="line">//两个对象的地址相等，一定是同一个对象</span><br><span class="line">if(this==obj) &#123;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">if(obj instanceof Student) &#123;</span><br><span class="line">Student s = (Student) obj;</span><br><span class="line">if(this.name.equals(s.name)&amp;&amp;this.age == s.age) &#123;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>存放到hashset,并输出到控制台</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">Student s1 = new Student(&quot;zs&quot;, 18);</span><br><span class="line">Student s2 = new Student(&quot;zs&quot;, 18);</span><br><span class="line"></span><br><span class="line">HashSet&lt;Student&gt; set = new HashSet&lt;&gt;();</span><br><span class="line">set.add(s1);</span><br><span class="line">set.add(s2);</span><br><span class="line">Iterator&lt;Student&gt; iterator = set.iterator();</span><br><span class="line">while(iterator.hasNext()) &#123;</span><br><span class="line">Student next = iterator.next();</span><br><span class="line">System.out.println(next);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><p><img src="/.com//06/29/equals/3.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;equals-方法与-的区别&quot;&gt;&lt;a href=&quot;#equals-方法与-的区别&quot; class=&quot;headerlink&quot; title=&quot;equals()方法与==的区别&quot;&gt;&lt;/a&gt;equals()方法与==的区别&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;==:对于基本类型比较的是值，对于引用类型比较的是地址&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>clone() 浅拷贝与深拷贝</title>
    <link href="http://yoursite.com/2019/06/29/clone-%E6%B5%85%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
    <id>http://yoursite.com/2019/06/29/clone-浅拷贝与深拷贝/</id>
    <published>2019-06-29T02:19:55.000Z</published>
    <updated>2019-06-29T05:50:29.941Z</updated>
    
    <content type="html"><![CDATA[<h3 id="clone的用法"><a href="#clone的用法" class="headerlink" title="clone的用法"></a>clone的用法</h3><p>用来复制一个对象的副本，产生一个新的对象，新对象的属性与原对象的属性一致，而且原对象的改变不影响新对象</p><p>克隆有浅拷贝与深拷贝，用的时候一定要注意</p><a id="more"></a><p>使用对象的clone()方法时，需要实现Cloneable接口,这是一个标志接口，不提供任何抽象方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public interface Cloneable &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><p>先来看一段代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class Persion implements Cloneable&#123;</span><br><span class="line"></span><br><span class="line">private int age;</span><br><span class="line">private String name;</span><br><span class="line"></span><br><span class="line">public Persion(int age, String name) &#123;</span><br><span class="line">        </span><br><span class="line">this.age = age;</span><br><span class="line">this.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">protected Object clone() throws CloneNotSupportedException &#123;</span><br><span class="line"></span><br><span class="line">return super.clone();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) throws CloneNotSupportedException &#123;</span><br><span class="line"></span><br><span class="line">Persion p = new Persion(18,&quot;zｈang&quot;);</span><br><span class="line">Persion p2 = (Persion) p.clone();</span><br><span class="line">System.out.println(p.name == p2.name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它的打印结果是什么呢？</p><p>true</p><p>没看错，就是这个结果，有没有困惑的地方？这就是由于浅拷贝导致的。看张图：</p><p><img src="/.com//06/29/clone-%E6%B5%85%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B7%B1%E6%8B%B7%E8%B4%9D/1.png" alt></p><p>由于name是String类型，拷贝的只是它的引用,所以他们的name的地址值是相等的</p><p>那怎样将它改为深拷贝呢？</p><p>如果是引用类型，我们需要重新在原对象的基础上重新创建出一个对象。</p><p>例如，将上面改为深拷贝，只需要修改一下clone方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected Object clone() throws CloneNotSupportedException &#123;</span><br><span class="line"></span><br><span class="line">String newName = new String(this.name);//拷贝原对象的name值</span><br><span class="line">Persion p  = (Persion)super.clone();</span><br><span class="line">p.name = newName;</span><br><span class="line">return p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/.com//2.png" alt></p><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><p>再来看一个深拷贝的例子：</p><p>A要实现深拷贝，必须要求其属性中含有的引用类型也必须进行深拷贝，也就是要求B要进行深拷贝</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">class A implements Cloneable&#123;</span><br><span class="line"></span><br><span class="line">  int id;</span><br><span class="line"> B b;</span><br><span class="line"> </span><br><span class="line">public A(int id, B b) &#123;</span><br><span class="line"></span><br><span class="line">this.id = id;</span><br><span class="line">this.b = b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">protected Object clone() throws CloneNotSupportedException &#123;</span><br><span class="line">//深拷贝</span><br><span class="line">B nb = (B) b.clone();</span><br><span class="line">A na = (A) super.clone();</span><br><span class="line">na.b = nb;</span><br><span class="line"></span><br><span class="line">return na;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class B implements Cloneable &#123;</span><br><span class="line"></span><br><span class="line"> String name;</span><br><span class="line"> B(String name) &#123;</span><br><span class="line"></span><br><span class="line">this.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">protected Object clone() throws CloneNotSupportedException &#123;</span><br><span class="line"></span><br><span class="line">B b = (B) super.clone();</span><br><span class="line">String sname = new String(name);</span><br><span class="line">b.name = sname;</span><br><span class="line">return b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;clone的用法&quot;&gt;&lt;a href=&quot;#clone的用法&quot; class=&quot;headerlink&quot; title=&quot;clone的用法&quot;&gt;&lt;/a&gt;clone的用法&lt;/h3&gt;&lt;p&gt;用来复制一个对象的副本，产生一个新的对象，新对象的属性与原对象的属性一致，而且原对象的改变不影响新对象&lt;/p&gt;
&lt;p&gt;克隆有浅拷贝与深拷贝，用的时候一定要注意&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Flume</title>
    <link href="http://yoursite.com/2019/06/27/Flume/"/>
    <id>http://yoursite.com/2019/06/27/Flume/</id>
    <published>2019-06-27T06:23:30.000Z</published>
    <updated>2019-06-28T08:48:12.959Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-Flume是什么"><a href="#一-Flume是什么" class="headerlink" title="一.Flume是什么"></a>一.Flume是什么</h2><p>Flume是一个分布式的，可靠的，高可用的海量日志采集系统，以Event为单位进行传输</p><h2 id="二-Flume的三大组件"><a href="#二-Flume的三大组件" class="headerlink" title="二.Flume的三大组件"></a>二.Flume的三大组件</h2><h3 id="source数据输入端的常见类型"><a href="#source数据输入端的常见类型" class="headerlink" title="source数据输入端的常见类型"></a>source数据输入端的常见类型</h3><ul><li>spooling directory :文件中的数据</li><li>exec :执行linux的命令，监控文件数据</li><li>syslog:文件日志</li><li>avro:序列化框架</li><li>netcat:监听端口</li></ul><a id="more"></a><h3 id="channel缓冲区"><a href="#channel缓冲区" class="headerlink" title="channel缓冲区"></a>channel缓冲区</h3><p>  位于Source和Sink,flume自带两种缓冲区Memory Channel,File Channel</p><ul><li>Memoey Channel :基于内存缓存，在不关心数据丢失的情况下使用</li><li>File Channel : 持久化Channel,不易丢失数据</li></ul><h3 id="sink数据输出端"><a href="#sink数据输出端" class="headerlink" title="sink数据输出端"></a>sink数据输出端</h3><p>常见的目的地包括Hdfs,Kafka,logger,avro,file</p><h2 id="三-Flume的操作"><a href="#三-Flume的操作" class="headerlink" title="三.Flume的操作"></a>三.Flume的操作</h2><h3 id="1-监控指定端口，并采集数据，输出到控制台"><a href="#1-监控指定端口，并采集数据，输出到控制台" class="headerlink" title="1.监控指定端口，并采集数据，输出到控制台"></a>1.监控指定端口，并采集数据，输出到控制台</h3><p>agent:</p><p>source使用netcat,监控指定的端口</p><p>先检测要监听的端口是否已经被占用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo netstat -tunlp | grep 44444</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo netstat -tunlp | grep 44444</span><br><span class="line">参数说明：</span><br><span class="line">-t:tcp -u:udp -n:网络连接　-l:listener p:进程</span><br></pre></td></tr></table></figure><p>channel使用memory</p><p>sink使用logger</p><p>创一个配置文件:vi netcat.flm</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># Name the components on this agent</span><br><span class="line">a1.sources = r1  // a1:agent的名称 r1:source的名称</span><br><span class="line">a1.sinks = k1// k1:sink的名称</span><br><span class="line">a1.channels = c1　//c1:channel的名称</span><br><span class="line"></span><br><span class="line"># Describe/configure the source</span><br><span class="line">a1.sources.r1.type = netcat　</span><br><span class="line">a1.sources.r1.bind = localhost //绑定本机</span><br><span class="line">a1.sources.r1.port = 44444//监听对应端口</span><br><span class="line"></span><br><span class="line"># Describe the sink</span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line"></span><br><span class="line"># Use a channel which buffers events in memory</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line"></span><br><span class="line"># Bind the source and sink to the channel</span><br><span class="line">a1.sources.r1.channels = c1　// source输出到指定channel</span><br><span class="line">a1.sinks.k1.channel = c1//channel到指定的sink</span><br></pre></td></tr></table></figure><p>执行命令，启动agent：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">flume-ng agent -c flume/conf/ -f netcat.flm -n a1 </span><br><span class="line">-Dflume.root.logger=INFO,console</span><br><span class="line">//-c:指定flume的配置文件　－f:指定要执行的配置文件　-n:agent的名字，要与配置中一致</span><br></pre></td></tr></table></figure><p>使用telnet测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet local host message</span><br></pre></td></tr></table></figure><h3 id="2-实时采集数据并输出到控制台"><a href="#2-实时采集数据并输出到控制台" class="headerlink" title="2.实时采集数据并输出到控制台"></a>2.实时采集数据并输出到控制台</h3><p>agent:</p><p>​    source使用exec</p><p>​    配置文件 vi exec.flm</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># Name the components on this agent</span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line"></span><br><span class="line"># Describe/configure the source</span><br><span class="line">a1.sources.r1.type = exec</span><br><span class="line">a1.sources.r1.command = tail -F /home/briup/log/test.log //要监控的文件</span><br><span class="line"># 命令从-c后的字符串读取</span><br><span class="line">a1.sources.r1.shell = /bin/sh -c</span><br><span class="line"></span><br><span class="line"># Describe the sink</span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line"></span><br><span class="line"># Use a channel which buffers events in memory</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line"># Bind the source and sink to the channel</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure><p>运行agent</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flume-ng agent -c flume/conf/ -f exec.flm -n a1 -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure><h3 id="3-Spool监测配置的目录下新增的文件"><a href="#3-Spool监测配置的目录下新增的文件" class="headerlink" title="3.Spool监测配置的目录下新增的文件"></a>3.Spool监测配置的目录下新增的文件</h3><p>agent: spooldir</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir spool //先创建一个目录，指定这个目录为要监听的目录</span><br></pre></td></tr></table></figure><p>配置文件：vi  spool.flm</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line"></span><br><span class="line">a1.sources.r1.type = spooldir</span><br><span class="line">a1.sources.r1.spoolDir =/home/master/spool</span><br><span class="line">a1.sources.r1.fileHeader = true</span><br><span class="line"></span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line"></span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line"></span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure><p>启动agent</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flume-ng agent -c flume/conf/ -f spool.flm -n a1 -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure><h3 id="4-Syslogtcp监听TCP的端口做为数据源"><a href="#4-Syslogtcp监听TCP的端口做为数据源" class="headerlink" title="4.Syslogtcp监听TCP的端口做为数据源"></a>4.Syslogtcp监听TCP的端口做为数据源</h3><p>agent:syslogtcp</p><p>vi syslogtcp.flm //配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line"></span><br><span class="line">a1.sources.r1.type = syslogtcp</span><br><span class="line">a1.sources.r1.port = 5140</span><br><span class="line">a1.sources.r1.host = localhost</span><br><span class="line"></span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line"></span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure><p>启动agent</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flume-ng agent -c flume/conf/ -f syslogtcp.flm -n a1 -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;hello world&quot; | nc localhost 5140</span><br></pre></td></tr></table></figure><h2 id="三-agent执行原理"><a href="#三-agent执行原理" class="headerlink" title="三.agent执行原理"></a>三.agent执行原理</h2><ol><li>source接受事件</li><li>channel处理器处理事件后，被拦截器拦截</li><li>拦截器处理后，进入channel选择器，根据channel选择器的选择结果，将事件写入对应的channel</li><li>Sink选择器选择其中一个Sink去获取Channel数据，并将数据写入到下一个阶段</li></ol><h4 id="channel选择器："><a href="#channel选择器：" class="headerlink" title="channel选择器："></a>channel选择器：</h4><pre><code>1. Replicating Channel Selector:将source发过来的events发往所有channel   2. Multiplexing channel Selector:可以将事件配置发往哪些Channel</code></pre><h2 id="五-flume的高可用"><a href="#五-flume的高可用" class="headerlink" title="五.flume的高可用"></a>五.flume的高可用</h2><h3 id="1-故障转移"><a href="#1-故障转移" class="headerlink" title="1.故障转移"></a>1.故障转移</h3><p>利用备份agent，当原来的agent挂掉后，切换到备份agent,需要使用到一个前置agent，或者是一个java程序来读取原来的数据，通过sink组(processor)输出到不同的agent.</p><p>配置实现</p><p>首先配置前置的agent，vi pre_flm</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1 k2</span><br><span class="line">a1.channels = c1 c2</span><br><span class="line">#这个是配置failover的关键，需要有一个sink group</span><br><span class="line">a1.sinkgroups = g1</span><br><span class="line">a1.sinkgroups.g1.sinks = k1 k2</span><br><span class="line">#处理的类型是failover</span><br><span class="line">a1.sinkgroups.g1.processor.type = failover</span><br><span class="line">#优先级，数字越大优先级越高，每个sink的优先级必须不相同</span><br><span class="line">a1.sinkgroups.g1.processor.priority.k1 = 5</span><br><span class="line">a1.sinkgroups.g1.processor.priority.k2 = 10</span><br><span class="line">#设置为10秒，当然可以根据你的实际状况更改成更快或者很慢</span><br><span class="line">a1.sinkgroups.g1.processor.maxpenalty = 10000</span><br><span class="line">  </span><br><span class="line"># Describe/configure the source</span><br><span class="line">a1.sources.r1.type = syslogtcp</span><br><span class="line">a1.sources.r1.port = 5140</span><br><span class="line">a1.sources.r1.channels = c1 c2</span><br><span class="line">a1.sources.r1.selector.type = replicating</span><br><span class="line"></span><br><span class="line"># Describe the sink</span><br><span class="line">a1.sinks.k1.type = avro</span><br><span class="line">a1.sinks.k1.channel = c1</span><br><span class="line">a1.sinks.k1.hostname = localhost</span><br><span class="line">a1.sinks.k1.port = 5555</span><br><span class="line"> </span><br><span class="line">a1.sinks.k2.type = avro</span><br><span class="line">a1.sinks.k2.channel = c2</span><br><span class="line">a1.sinks.k2.hostname = localhost</span><br><span class="line">a1.sinks.k2.port = 6666</span><br><span class="line">  </span><br><span class="line"># Use a channel which buffers events in memory</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line">  </span><br><span class="line">a1.channels.c2.type = memory</span><br><span class="line">a1.channels.c2.capacity = 1000</span><br><span class="line">a1.channels.c2.transactionCapacity = 100</span><br></pre></td></tr></table></figure><p>第二配置agent与back_agent　vi agent.flm　vi back_agent.flm</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">#agent.flm</span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line">Describe/configure the source</span><br><span class="line">a1.sources.r1.type = avro</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sources.r1.bind = 0.0.0.0</span><br><span class="line">a1.sources.r1.port = 6666 </span><br><span class="line">Describe the sink</span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line">Use a channel which buffers events in memory</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line">Bind the source and sink to the channel</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br><span class="line"></span><br><span class="line">#back_agent.flm</span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line">Describe/configure the source</span><br><span class="line">a1.sources.r1.type = avro</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sources.r1.bind = 0.0.0.0</span><br><span class="line">a1.sources.r1.port = 5555</span><br><span class="line">Describe the sink</span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line">Use a channel which buffers events in memory</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line">Bind the source and sink to the channel</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure><p>然后就可以使用命令启动这些配置了，先启动agent和back_agent，再启动pre_flm</p><p>然后向pre_flm发送数据，发现agent会接受到数据，使用<code>crtl c</code>关闭agent，会发现back_agent可以接受到数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">flume-ng agent -c flume/conf/ -f pre.flm -n a1 -Dflume.root.logger=INFO,console</span><br><span class="line"></span><br><span class="line">flume-ng agent -c flume/conf/ -f agent.flm -n a1 -Dflume.root.logger=INFO,console</span><br><span class="line"></span><br><span class="line">flume-ng agent -c flume/conf/ –f agent_back.flm -n a1 -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure><h3 id="2-负载均衡"><a href="#2-负载均衡" class="headerlink" title="2.负载均衡"></a>2.负载均衡</h3><p>利用前置的agent，通过processor向多个agent轮询的发送数据</p><p>首先配置前置的agent，vi pre_flm</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1 k2</span><br><span class="line">a1.channels = c1 c2</span><br><span class="line">  </span><br><span class="line">#这个是配置Load balancing的关键，需要有一个sink group</span><br><span class="line">a1.sinkgroups = g1</span><br><span class="line">a1.sinkgroups.g1.sinks = k1 k2</span><br><span class="line"></span><br><span class="line">a1.sinkgroups.g1.processor.type = load_balance</span><br><span class="line">#是否是开启退避功能</span><br><span class="line">a1.sinkgroups.g1.processor.backoff = true</span><br><span class="line">＃轮询</span><br><span class="line">a1.sinkgroups.g1.processor.selector = round_robin</span><br><span class="line">  </span><br><span class="line"># Describe/configure the source</span><br><span class="line">a1.sources.r1.type = avro</span><br><span class="line">a1.sources.r1.bind = 0.0.0.0</span><br><span class="line">a1.sources.r1.port = 5140</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">  </span><br><span class="line"># Describe the sink</span><br><span class="line">a1.sinks.k1.type = avro</span><br><span class="line">a1.sinks.k1.channel = c1</span><br><span class="line">a1.sinks.k1.hostname = localhost</span><br><span class="line">a1.sinks.k1.port = 5555</span><br><span class="line">  </span><br><span class="line">a1.sinks.k2.type = avro</span><br><span class="line">a1.sinks.k2.channel = c2</span><br><span class="line">a1.sinks.k2.hostname = localhost</span><br><span class="line">a1.sinks.k2.port = 6666</span><br><span class="line">  </span><br><span class="line"># Use a channel which buffers events in memory</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line">a1.channels.c2.type = memory</span><br></pre></td></tr></table></figure><p>第二配置agent a与agnet b　vi a.flm　vi b.flm</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">#a.flm</span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line">  </span><br><span class="line"># Describe/configure the source</span><br><span class="line">a1.sources.r1.type = avro</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sources.r1.bind = 0.0.0.0</span><br><span class="line">a1.sources.r1.port = 5555</span><br><span class="line">  </span><br><span class="line"># Describe the sink</span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line">  </span><br><span class="line"># Use a channel which buffers events in memory</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line">  </span><br><span class="line"># Bind the source and sink to the channel</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#b.flm</span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line">  </span><br><span class="line"># Describe/configure the source</span><br><span class="line">a1.sources.r1.type = avro</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sources.r1.bind = 0.0.0.0</span><br><span class="line">a1.sources.r1.port = 5555</span><br><span class="line">  </span><br><span class="line"># Describe the sink</span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line">  </span><br><span class="line"># Use a channel which buffers events in memory</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line">  </span><br><span class="line"># Bind the source and sink to the channel</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一-Flume是什么&quot;&gt;&lt;a href=&quot;#一-Flume是什么&quot; class=&quot;headerlink&quot; title=&quot;一.Flume是什么&quot;&gt;&lt;/a&gt;一.Flume是什么&lt;/h2&gt;&lt;p&gt;Flume是一个分布式的，可靠的，高可用的海量日志采集系统，以Event为单位进行传输&lt;/p&gt;
&lt;h2 id=&quot;二-Flume的三大组件&quot;&gt;&lt;a href=&quot;#二-Flume的三大组件&quot; class=&quot;headerlink&quot; title=&quot;二.Flume的三大组件&quot;&gt;&lt;/a&gt;二.Flume的三大组件&lt;/h2&gt;&lt;h3 id=&quot;source数据输入端的常见类型&quot;&gt;&lt;a href=&quot;#source数据输入端的常见类型&quot; class=&quot;headerlink&quot; title=&quot;source数据输入端的常见类型&quot;&gt;&lt;/a&gt;source数据输入端的常见类型&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;spooling directory :文件中的数据&lt;/li&gt;
&lt;li&gt;exec :执行linux的命令，监控文件数据&lt;/li&gt;
&lt;li&gt;syslog:文件日志&lt;/li&gt;
&lt;li&gt;avro:序列化框架&lt;/li&gt;
&lt;li&gt;netcat:监听端口&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Flume" scheme="http://yoursite.com/tags/Flume/"/>
    
  </entry>
  
  <entry>
    <title>java设计模式(单例模式)</title>
    <link href="http://yoursite.com/2019/06/26/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/06/26/java设计模式-单例模式/</id>
    <published>2019-06-26T12:17:01.000Z</published>
    <updated>2019-06-28T08:48:23.259Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设计模式之单例模式"><a href="#设计模式之单例模式" class="headerlink" title="设计模式之单例模式"></a>设计模式之单例模式</h2><h3 id="一-什么是单例模式"><a href="#一-什么是单例模式" class="headerlink" title="一.什么是单例模式"></a>一.什么是单例模式</h3><p>​    确保类只有一个实例，不会出现多个</p><a id="more"></a><h3 id="二-单例模式解决了什么问题"><a href="#二-单例模式解决了什么问题" class="headerlink" title="二.单例模式解决了什么问题"></a>二.单例模式解决了什么问题</h3><p>​    保证类在内存的对象唯一</p><h3 id="三-单例模式的两种形式"><a href="#三-单例模式的两种形式" class="headerlink" title="三.单例模式的两种形式"></a>三.单例模式的两种形式</h3><h4 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h4><pre><code>public class Single{    private static static Single instance = new Single();    private Single(){    }    public static Single getInstance(){        return instance;    }}</code></pre><p><strong>１．为什么叫这种模式为饿汉式？</strong></p><p>​    类在加载的时候就创建好了这个对象</p><p><strong>２．为什么构造方法是私有的，方法是静态的，属性也是静态的？</strong></p><p>​         首先单例模式只创建一个实例，是不能通过new去创建实例的，所以构造方法是私有的</p><p>​        第二不能通过实例去调用方法，只能通过类名去访问，所以方法是静态的 由于静态方法只能访                    </p><p>　　问静态的属性所以属性也是静态的。　    </p><h4 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h4><h5 id="线程不安全"><a href="#线程不安全" class="headerlink" title="线程不安全"></a>线程不安全</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class Single｛</span><br><span class="line"></span><br><span class="line">private static Single single = null;</span><br><span class="line"></span><br><span class="line">public Single&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static Single getInstance()&#123;</span><br><span class="line"></span><br><span class="line">if(single ==  null)&#123;</span><br><span class="line">single = new Single();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return single;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class Single&#123;</span><br><span class="line">    </span><br><span class="line">    private static Single single = null;</span><br><span class="line">    </span><br><span class="line">    public static Single getInstance()&#123;</span><br><span class="line">    </span><br><span class="line">        if(single == null)&#123;  //如果single已经实例化，则不在去获取锁，提高效率</span><br><span class="line">            synchronized(Single.class)&#123;</span><br><span class="line">                if(single == null)&#123;</span><br><span class="line">                    single = new Single();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        return single;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;设计模式之单例模式&quot;&gt;&lt;a href=&quot;#设计模式之单例模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式之单例模式&quot;&gt;&lt;/a&gt;设计模式之单例模式&lt;/h2&gt;&lt;h3 id=&quot;一-什么是单例模式&quot;&gt;&lt;a href=&quot;#一-什么是单例模式&quot; class=&quot;headerlink&quot; title=&quot;一.什么是单例模式&quot;&gt;&lt;/a&gt;一.什么是单例模式&lt;/h3&gt;&lt;p&gt;​    确保类只有一个实例，不会出现多个&lt;/p&gt;
    
    </summary>
    
    
      <category term="java 设计模式" scheme="http://yoursite.com/tags/java-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
